{"version":3,"file":"component---src-templates-tag-js-8916f343203d2274d2e0.js","mappings":"oJA8GA,UArGYA,IAA4B,IAA3B,YAAEC,EAAW,KAAEC,GAAMF,EAC9B,MAAMG,EAAQD,EAAKE,kBAAkBC,MACrCC,QAAQC,IAAIN,EAAYO,KACxB,MAAM,IAAEA,GAAQP,GACV,WAAEQ,GAAeP,EAAKE,kBACtBM,EAAeD,EAAU,SACZ,IAAfA,EAAmB,GAAK,KAAG,iBACVD,EAAG,IAGxB,OACIG,EAAAA,cAACC,EAAAA,EAAM,KACHD,EAAAA,cAAA,OAAKE,UAAU,cACXF,EAAAA,cAAA,OAAKE,UAAU,qBACXF,EAAAA,cAACG,EAAAA,EAAO,OAGZH,EAAAA,cAAA,OAAKE,UAAU,kBACXF,EAAAA,cAAA,SAAGA,EAAAA,cAAA,MAAIE,UAAU,WAAWH,IAC3BP,EAAMY,KAAKC,IACKA,EAAKC,KAAKC,YAAYC,KACnC,OACIR,EAAAA,cAAA,OAAKS,IAAKJ,EAAKC,KAAKI,GAAIR,UAAU,kBAC9BF,EAAAA,cAACW,EAAAA,GAAI,CACDC,GAAIP,EAAKC,KAAKO,OAAOC,KACrBZ,UAAU,aACVF,EAAAA,cAAA,MAAIE,UAAU,WAAWG,EAAKC,KAAKC,YAAYQ,QAEnDf,EAAAA,cAAA,SAAOE,UAAU,qBAAoB,aAAWG,EAAKC,KAAKC,YAAYS,MAEtEhB,EAAAA,cAAA,KAAGE,UAAU,iBAAiBG,EAAKC,KAAKW,SACxCjB,EAAAA,cAACW,EAAAA,GAAI,CACDC,GAAIP,EAAKC,KAAKO,OAAOC,KACrBZ,UAAU,gBACVF,EAAAA,cAAA,SAAOE,UAAU,uBAAsB,oBAE3CF,EAAAA,cAAA,OAAKE,UAAU,YAGb,MAKjB,C","sources":["webpack://blog/./src/templates/tag.js"],"sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"../pages/index.css\"\n\nimport Layout from \"../components/layout\"\nimport Sidebar from \"../components/sidebar/Sidebar\"\n\nconst Tag = ({ pageContext, data }) => {\n    const posts = data.allMarkdownRemark.edges\n    console.log(pageContext.tag)\n    const { tag } = pageContext\n    const { totalCount } = data.allMarkdownRemark\n    const tagHeader = `${totalCount} post${\n        totalCount === 1 ? \"\" : \"s\"\n        } tagged with \"${tag}\"`\n\n\n    return (\n        <Layout>\n            <div className=\"index-main\">\n                <div className=\"sidebar px-4 py-2\">\n                    <Sidebar />\n                </div>\n\n                <div className=\"post-list-main\">\n                    <i><h2 className=\"heading\">{tagHeader}</h2></i>\n                    {posts.map((post) => {\n                        const tags = post.node.frontmatter.tags\n                        return (\n                            <div key={post.node.id} className=\"container mt-5\">\n                                <Link\n                                    to={post.node.fields.slug}\n                                    className=\"text-dark\">\n                                    <h2 className=\"heading\">{post.node.frontmatter.title}</h2>\n                                </Link>\n                                <small className=\"d-block text-info\">Posted on {post.node.frontmatter.date}\n                                </small>\n                                <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\n                                <Link\n                                    to={post.node.fields.slug}\n                                    className=\"text-primary\">\n                                    <small className=\"d-inline-block ml-3\"> Read full post</small>\n                                </Link>\n                                <div className=\"d-block\">\n                                    \n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        </Layout>\n    )\n}\n\nTag.propTypes = {\n    pageContext: PropTypes.shape({\n        tag: PropTypes.string.isRequired,\n    }),\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            totalCount: PropTypes.number.isRequired,\n            edges: PropTypes.arrayOf(\n                PropTypes.shape({\n                    node: PropTypes.shape({\n                        frontmatter: PropTypes.shape({\n                            title: PropTypes.string.isRequired,\n                        }),\n                    }),\n                }).isRequired\n            ),\n        }),\n    }),\n}\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n        siteMetadata {\n            title \n            author\n        }\n    } \n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n         node {\n            excerpt(pruneLength: 200)\n            html\n            id\n            frontmatter {\n                title\n                date(formatString: \"MMMM, YYYY\")\n                tags\n            }\n             fields {\n                slug\n            }\n        }\n      }\n    }\n  }\n`\n\nexport default Tag"],"names":["_ref","pageContext","data","posts","allMarkdownRemark","edges","console","log","tag","totalCount","tagHeader","React","Layout","className","Sidebar","map","post","node","frontmatter","tags","key","id","Link","to","fields","slug","title","date","excerpt"],"sourceRoot":""}