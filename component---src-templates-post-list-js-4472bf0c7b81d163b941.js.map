{"version":3,"file":"component---src-templates-post-list-js-4472bf0c7b81d163b941.js","mappings":"oJAiGA,UAzFkBA,IACd,MAAMC,EAAQD,EAAME,KAAKC,kBAAkBC,OACrC,YAAEC,EAAW,SAAEC,GAAaN,EAAMO,YAClCC,EAA0B,IAAhBH,EACVI,EAASJ,IAAgBC,EACzBI,EAAWL,EAAc,GAAM,EAAI,IAAM,KAAOA,EAAc,GAAGM,WACjEC,EAAW,KAAOP,EAAc,GAAGM,WAEzC,OACIE,EAAAA,cAACC,EAAAA,EAAM,KACHD,EAAAA,cAAA,OAAKE,UAAU,cACXF,EAAAA,cAAA,OAAKE,UAAU,qBACXF,EAAAA,cAACG,EAAAA,EAAO,OAEZH,EAAAA,cAAA,OAAKE,UAAU,kBACVd,EAAMgB,KAAKC,GAGJL,EAAAA,cAAA,OAAKM,IAAKD,EAAKE,KAAKC,GAAIN,UAAU,kBAC9BF,EAAAA,cAACS,EAAAA,GAAI,CACDC,GAAIL,EAAKE,KAAKI,OAAOC,KACrBV,UAAU,aACVF,EAAAA,cAAA,MAAIE,UAAU,SAASG,EAAKE,KAAKM,YAAYC,QAEjDd,EAAAA,cAAA,SAAOE,UAAU,qBACfF,EAAAA,cAAA,SAAG,aAAWK,EAAKE,KAAKM,YAAYE,OAEtCf,EAAAA,cAAA,KAAGE,UAAU,iBAAiBG,EAAKE,KAAKS,SACxChB,EAAAA,cAACS,EAAAA,GAAI,CACDC,GAAIL,EAAKE,KAAKI,OAAOC,KACrBV,UAAU,gBACVF,EAAAA,cAAA,SAAOE,UAAU,uBAAsB,uBAKvDF,EAAAA,cAAA,OAAKE,UAAU,qBACTP,GACEK,EAAAA,cAACS,EAAAA,GAAI,CAACC,GAAIb,EAAUoB,IAAI,OAAOC,MAAO,CAAEC,eAAe,SACnDnB,EAAAA,cAAA,QAAME,UAAU,aAAY,qBAGlCN,GACEI,EAAAA,cAACS,EAAAA,GAAI,CAACC,GAAIX,EAAUkB,IAAI,OAAOC,MAAO,CAAEC,eAAe,SACnDnB,EAAAA,cAAA,QAAME,UAAU,kBAAiB,mBAMhD,C","sources":["webpack://blog/./src/templates/post-list.js"],"sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"../pages/index.css\"\n\nimport Layout from \"../components/layout\"\nimport Sidebar from \"../components/sidebar/Sidebar\"\n\nconst PostList = (props) => {\n    const posts = props.data.allMarkdownRemark.edges\n    const { currentPage, numPages } = props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? \"/\" : \"/\" + (currentPage - 1).toString()\n    const nextPage = \"/\" + (currentPage + 1).toString()\n\n    return (\n        <Layout>\n            <div className=\"index-main\">\n                <div className=\"sidebar px-4 py-2\">\n                    <Sidebar />\n                </div>\n                <div className=\"post-list-main\">\n                    {posts.map((post) => {\n                        //const tags = post.node.frontmatter.tags\n                        return (\n                            <div key={post.node.id} className=\"container mt-5\">\n                                <Link\n                                    to={post.node.fields.slug}\n                                    className=\"text-dark\">\n                                    <h2 className=\"title\">{post.node.frontmatter.title}</h2>\n                                </Link>\n                                <small className=\"d-block text-info\">\n                                  <i>Posted on {post.node.frontmatter.date}</i>\n                                </small>\n                                <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\n                                <Link\n                                    to={post.node.fields.slug}\n                                    className=\"text-primary\">\n                                    <small className=\"d-inline-block ml-3\"> Read full post</small>\n                                </Link>\n                            </div>\n                        )\n                    })}\n                    <div className=\"text-center mt-4\">\n                        {!isFirst && (\n                            <Link to={prevPage} rel=\"prev\" style={{ textDecoration: `none` }}>\n                                <span className=\"text-dark\">← Previous Page</span>\n                            </Link>\n                        )}\n                        {!isLast && (\n                            <Link to={nextPage} rel=\"next\" style={{ textDecoration: `none` }}>\n                                <span className=\"text-dark ml-5\">Next Page →</span>\n                            </Link>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </Layout>\n    )\n}\n\nexport const listQuery = graphql`\n         query paginateQuery($skip: Int!, $limit: Int!) {\n           site {\n             siteMetadata {\n               title \n               author\n             }\n           }\n           allMarkdownRemark(\n             limit: $limit\n             skip: $skip\n             sort: { fields: [frontmatter___date], order: DESC }\n             filter: { frontmatter: { published: { eq: true } } }\n           ) {\n             totalCount\n             edges {\n               node {\n                 excerpt(pruneLength: 200)\n                 html\n                 id\n                 frontmatter {\n                   title\n                   date(formatString: \"MMMM DD, YYYY\")\n                   tags\n                   author\n                 }\n                 fields {\n                   slug\n                 }\n               }\n             }\n           }\n         }\n       `\n\nexport default PostList\n"],"names":["props","posts","data","allMarkdownRemark","edges","currentPage","numPages","pageContext","isFirst","isLast","prevPage","toString","nextPage","React","Layout","className","Sidebar","map","post","key","node","id","Link","to","fields","slug","frontmatter","title","date","excerpt","rel","style","textDecoration"],"sourceRoot":""}