{"componentChunkName":"component---src-templates-tag-js","path":"/tags/microservices/","result":{"data":{"site":{"siteMetadata":{"title":"rprakashg.github.io","author":"RAM GOPINATHAN"}},"allMarkdownRemark":{"totalCount":2,"edges":[{"node":{"excerpt":"We all know managing kubernetes platform is complex and as an enterprise our goal is to have our developers be focussed on building features and enhancements that provide value to our customers who…","html":"<p>We all know managing kubernetes platform is complex and as an enterprise our goal is to have our developers be focussed on building features and enhancements that provide value to our customers who use our products and services. Less time that we can focus on kubernetes infrastructure the better we will be in terms of doing things that make our customers happy. If you look across the industry cloud providers and vendors are all solving this complexity problem by providing managed services for running and operating kubernetes platform.  For instance Google provides <a href=\"https://cloud.google.com/kubernetes-engine/\">Google Kubernetes Engine</a> aka GKE, Amazon has <a href=\"https://aws.amazon.com/eks/\">Elastic Kubernetes Service</a> aka EKS, Azure has <a href=\"https://azure.microsoft.com/en-us/services/kubernetes-service/\">Azure Kubernetes Service</a> aka AKS, Pivotal now VMWare has <a href=\"https://pivotal.io/platform/pivotal-container-service\">Pivotal Container Service</a> aka PKS and OpenShift, IBM, Oracle and many more vendors in the public cloud space providing similar solutions. This is going to be 8 part blog series where I will cover how to go from zero to production with Google Kubernetes Engine.</p>\n<ul>\n<li>\n<p><strong>Part 1:</strong> Account Setup</p>\n<p>This post we will go deep into your GCP account level setup to ensure we are starting off on a solid foundation.</p>\n</li>\n<li>\n<p><strong>Part 2:</strong> Up and running with Google Kubernetes Engine</p>\n<p>This post will go deep into provisioning a production ready GKE cluster</p>\n</li>\n<li>\n<p><strong>Part 3:</strong> Securing your Google Kubernetes Engine</p>\n<p>Now that you have a production grade GKE cluster stood up for deploying your workloads, in this post we will go deep into securing your GKE cluster</p>\n</li>\n<li>\n<p><strong>Part 4:</strong> Monitoring your Google Kubernetes Engine</p>\n<p>This post we will go deep into configuring logging and monitoring for your cluster. We are going to cover some choices and decisions you will have to make with respect to Open Source solutions v/s Integration with other Google services like StackDriver. This allows you to make sure you can move to other managed services or perhaps your own without locking into anything provider specific</p>\n</li>\n<li>\n<p><strong>Part 5:</strong> Autoscaling your Google Kubernetes Engine Cluster and PODs</p>\n<p>This post will cover configuring auto scaling for your cluster and configuring auto scaling for your application PODs</p>\n</li>\n<li>\n<p><strong>Part 6:</strong> Administering your Google Kubernetes Engine Cluster</p>\n<p>This post will cover administration activities such as Upgrading, Resizing clusters, Backup and Recovery, Understanding Resource Usage, Configuring Kubectl access etc.</p>\n</li>\n<li>\n<p><strong>Part 7:</strong> Enhancing platform services</p>\n<p>Kubernetes by itself is not sufficient to run real world workloads, there are lot of open source and vendor solutions for things like Service Mesh, Running different types of databases, Helm, etc. This post will cover things you might chose to install on top of your GKE cluster to enhance platform capabilities as well as support your workload requirements</p>\n</li>\n<li>\n<p><strong>Part 8:</strong> Deploying workloads to your Google Kubernetes Engine Cluster</p>\n<p>At this point you have a production ready kubernetes cluster that is ready for workloads to be deployed, in this post we will cover how to go from source to container to cluster</p>\n</li>\n</ul>\n<p>I'm planning to do a similar post with EKS and AKS, hopefully it will help anyone who is looking to leverage these services and personally I'm also curious to learn moving between these managed services mainly from a platform standpoint. Workloads since we are building for K8s abstraction you automatically get the portability so I'm not too concerned about that.</p>\n<p>Let me know your thoughts or comments in reply below also if you like me to cover anything else I might be missing</p>\n<p>Thanks,</p>\n<p>Ram</p>","id":"cf9e34ee-0b1e-5c28-ac71-4ca2741ef043","frontmatter":{"title":"Going to production with Google Kubernetes Engine (GKE)","date":"September, 2019","tags":["cloud","gke","google","microservices","devops"]},"fields":{"slug":"/production-k8s-with-gke/"}}},{"node":{"excerpt":"What is Configuration as code? Configuration as code is a DevOps practice that promotes storing of application configuration as code within source code repository. Few key benefits that this brings is…","html":"<h2>What is Configuration as code?</h2>\n<p>Configuration as code is a DevOps practice that promotes storing of application configuration as code within source code repository. Few key benefits that this brings is that</p>\n<ul>\n<li>\n<p>Versioning of application configuration</p>\n<p>By storing the application configuration in source code repository such as Git allows us to see what configuration changes were made over a period of time and who made those changes</p>\n<p>By using branches you can isolate changes that are under development without affecting the production application</p>\n</li>\n<li>\n<p>Traceability</p>\n<p>Versioned and managed properly, can provide tracking of what version of configuration is deployed in various environments</p>\n</li>\n<li>\n<p>Make configuration changes without requiring to re-deploy application</p>\n<p>Operators would love you for this for ex. Operators can throttle logging level up in configuration settings file to troubleshoot a production issue without having to redeploy the application.</p>\n</li>\n</ul>\n<h2>Implementation</h2>\n<p>Now that we understand what configuration as code is and what benefits it brings let's take a look at how we would implement this with docker and spring boot. Spring boot provides support for keeping configuration settings in \"yml\" files instead of using a properties files, by default spring boot looks for these \"yml\" files under classpath but you can specify an explicit location by setting \"spring.config.location\" property via command line during application startup.</p>\n<p>For the purpose of this article we have stored all default configurations for this demo application application.yml file and environment specific settings are stored in application-{environment label}.yml file as shown in screen capture below</p>\n<p><img src=\"/images/dzone4.png?raw=true\" alt=\"\"></p>\n<p>Since we are running the spring boot app in docker, we can use an \"entrypoint.sh\" bash script to pull default configuration and environment specific configuration files from \"git\" repository onto directory named \"configs\" as shown below using wget command.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Downloading configuration files from git repository\"</span>\n<span class=\"token function\">wget</span>  <span class=\"token variable\">$GIT_REPO</span>/<span class=\"token variable\">$LABEL</span>/<span class=\"token variable\">$REL_PATH</span>/<span class=\"token variable\">$APP_NAME</span>.yml\n<span class=\"token function\">wget</span>  <span class=\"token variable\">$GIT_REPO</span>/<span class=\"token variable\">$LABEL</span>/<span class=\"token variable\">$REL_PATH</span>/<span class=\"token variable\">$APP_NAME</span>-<span class=\"token variable\">$PROFILE</span>.yml\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"copying yml files to configs directory\"</span>\n<span class=\"token function\">cp</span> <span class=\"token variable\">$APP_NAME</span>.yml ./configs/<span class=\"token variable\">$APP_NAME</span>.yml\n<span class=\"token function\">cp</span> <span class=\"token variable\">$APP_NAME</span>-<span class=\"token variable\">$PROFILE</span>.yml ./configs/<span class=\"token variable\">$APP_NAME</span>-<span class=\"token variable\">$PROFILE</span>.yml</code></pre></div>\n<p>As you can see from the above snippet</p>\n<ul>\n<li>\n<p>\"GIT_REPO\" environment variable is used to pass the git repository URL where the configuration files are stored.</p>\n</li>\n<li>\n<p>\"LABEL\" environment variable maps to the branch, in development/test/staging phases you might use \"MASTER\", when you release it to production you'll want to create a branch and use that branch label. This allows us to isolate changes that are under development from impacting the production application.</p>\n</li>\n<li>\n<p>\"REL_PATH\" environment variable is used to point to the location of configuration files in repo relative to the repository path.</p>\n</li>\n<li>\n<p>\"APP_NAME\" environment variable maps to file name, in the demo app I'm keeping default name \"application\"</p>\n</li>\n<li>\n<p>\"PROFILE\" environment variable maps to name of environment which the application is running. Spring boot will merge the default settings and environment specific settings and provide it to your application.</p>\n</li>\n</ul>\n<p>(Note: If your git repository requires authentication you can use ssh or HTTPS protocol with username and password to authenticate with the git repository. Docker container can obtain the credentials required to connect to git repository during startup.)</p>\n<p>Once the configuration files are downloaded from repository onto \"configs\" directory in the container we specify this location via application startup using the \"spring.config.location\" property as shown in below snippet</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">exec</span> java <span class=\"token variable\">$JAVA_OPTS</span> -jar /app.jar --spring.config.location<span class=\"token operator\">=</span><span class=\"token string\">\"./configs/<span class=\"token variable\">$APP_NAME</span>.yml, ./configs/<span class=\"token variable\">$APP_NAME</span>-<span class=\"token variable\">$PROFILE</span>.yml\"</span></code></pre></div>\n<h2>Running the demo application</h2>\n<p>Let's now run this demo application with staging settings as shown in command below</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker run -d -p <span class=\"token number\">80</span>:8080 -e <span class=\"token assign-left variable\">PROFILE</span><span class=\"token operator\">=</span>staging -e <span class=\"token assign-left variable\">GIT_REPO</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://raw.githubusercontent.com/rprakashg/blog-demos\"</span> <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">LABEL</span><span class=\"token operator\">=</span>master -e <span class=\"token assign-left variable\">REL_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"externalize-config-demo/src/main/resources\"</span> <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">APP_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"application\"</span> rprakashg/externalize-config-demo</code></pre></div>\n<p>Demo application simply displays the configuration information and you can see from the screen capture below that application has picked up default settings as well as staging environment specific settings.\n<img src=\"/images/dzone5.png?raw=true\" alt=\"\"></p>\n<p>Let's run the same demo application now with production settings as shown in snippet below.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker run -d -p <span class=\"token number\">80</span>:8080 -e <span class=\"token assign-left variable\">PROFILE</span><span class=\"token operator\">=</span>production -e <span class=\"token assign-left variable\">GIT_REPO</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://raw.githubusercontent.com/rprakashg/blog-demos\"</span> <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">LABEL</span><span class=\"token operator\">=</span>master -e <span class=\"token assign-left variable\">REL_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"externalize-config-demo/src/main/resources\"</span> <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">APP_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"application\"</span> rprakashg/externalize-config-demo</code></pre></div>\n<p>As you can see from the screen show below that the application now picks up default as well as production specific settings.</p>\n<p><img src=\"/images/dzone6.png?raw=true\" alt=\"\"></p>\n<h2>Source Code</h2>\n<p>All the code for the demo application is available at this github <a href=\"https://github.com/rprakashg/blog-demos/tree/master/externalize-config-demo\">repository</a></p>\n<h2>Conclusion</h2>\n<p>Configuration as code is a good practice that all development teams practicing devops should follow. Many of the benefits gained from implementing configuration as code can help increase velocity and deliver new features to your customers in production faster and help operators run and manage application in production efficiently.</p>","id":"c6b39486-e322-5d0a-9c38-78e56755a83c","frontmatter":{"title":"Configuration As Code With Docker and Spring Boot","date":"September, 2017","tags":["java","devops","microservices","docker"]},"fields":{"slug":"/config-as-code-with-docker-spring-boot/"}}}]}},"pageContext":{"tag":"microservices"}},"staticQueryHashes":["1611934721","2366241629"]}