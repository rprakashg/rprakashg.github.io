{
    "componentChunkName": "component---src-pages-archive-js",
    "path": "/archive/",
    "result": {"data":{"site":{"siteMetadata":{"title":"rprakashg.github.io","author":"RAM GOPINATHAN"}},"allMarkdownRemark":{"totalCount":14,"edges":[{"node":{"excerpt":"Dear Family and Friends, I would like to take this opportunity to share with you some very exciting news. This year, I will be competing in the London Marathon on April 2019.  London Marathon is a…","html":"<p>Dear Family and Friends,</p>\n<p>I would like to take this opportunity to share with you some very exciting news.</p>\n<p>This year, I will be competing in the London Marathon on April 2019.  London Marathon is a long distance running event help every year in London in Spring.</p>\n<p>As I set out on my journey, I have pledged to raise $5000 for Smile Train and the many children living with untreated clefts in the developing world. Through your support, we will be able to provide free cleft repair surgery for 20 children with clefts, giving them not only a new smile, but a second chance at life.</p>\n<p><img src=\"/images/smile-train-london-marathon1.jpg?raw=true\" alt=\"\"></p>\n<p>Millions of children in developing countries are living with untreated clefts. Most cannot eat or speak properly and aren’t allowed to attend school or hold a job. Smile Train empowers local medical professionals to provide free cleft surgery and comprehensive cleft care to children in the developing world. Leveraging this ‘teach a man to fish’ approach to cleft care; Smile Train advances a sustainable solution and scalable model to treat clefts, drastically improving children’s lives, including their ability to eat, breathe, and speak over time. Smile Train Inc. is a 501(c)(3) organization (tax ID# 13-3661416).</p>\n<p>Cleft surgery is safe and can cost as little as $250 and can take as little as 45 minutes. As you can imagine, there is still so much work to do. Smile Train is the world’s leading cleft charity. If you aren’t familiar, clefts are a major problem in developing countries where there are more than one million children who are suffering with unrepaired clefts. Children born with clefts are forced into lives of isolation and shame- all because of the way they look. And their clefts usually go untreated because they either don’t know there is a simple fix, or they are too poor to afford this simple surgery. A simple surgery that will drastically change a child’s life forever.</p>\n<p>Thankfully, with your help and the help of Smile Train, we can change a child’s life forever.</p>\n<p>Join me as I support Smile Train and race to give these children a second chance at life. Please visit my secure, personal fundraising page to make a donation and help me reach my goal of 20 new smiles for children in need. <a href=\"https://my.smiletrain.org/fundraiser/rprakashg\">https://my.smiletrain.org/fundraiser/rprakashg</a></p>\n<p>If you feel more comfortable sending a check, please include a note with my name so that Smile Train knows to add it to my fundraiser. All donations can be sent to:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Smile Train Attn: Team EMPOWER\nPO Box 96231 \nWashington, D.C. 20090-6231</code></pre></div>\n<p>Thank you again for all your support and for helping me change the world, one smile at a time!</p>\n<p>Cheers,\nRam</p>","id":"a8e4d019-56ef-561d-9167-5ef5e68482b1","frontmatter":{"title":"Smile train","date":"September 28, 2018","tags":["londonmarathon","cleft","smiletrain"]},"fields":{"slug":"/smile-train-fundraiser/"}}},{"node":{"excerpt":"Last week I got a chance to attend Microsoft Build conference geared towards developers. I hadn't been to build for at least 3-4 years now, but it is still a top-notch developer event that everyone…","html":"<p>Last week I got a chance to attend Microsoft Build conference geared towards developers. I hadn't been to build for at least 3-4 years now, but it is still a top-notch developer event that everyone should attend if you have an opportunity, especially if you build or plan to build applications on Azure cloud platform. Build is famously known for many swag giveaways in the past which seems to be not the case anymore, but the quality of content and speakers are still top notch.</p>\n<p>My path to \"Build 2018\" conference was completely unexpected, back in April I came across a tweet by <a href=\"https://lenadroid.github.io/posts.html\">Lena Hall</a> one of the Azure Advocates talking about Azure Dev tour in Seattle.\n<img src=\"/images/twitter2.png?raw=true\" alt=\"\"></p>\n<p>I tried to register for this event, but unfortunately, I was a bit late I guess. I did not know the event was sold out when I fired off this reply.\n<img src=\"/images/twitter1.png?raw=true\" alt=\"\"></p>\n<p>I got this response from awesome Allison one of the Azure Advocates and organizers of the Azure dev tour.</p>\n<p><img src=\"/images/twitter3.png?raw=true\" alt=\"\"></p>\n<p>Long story short, I not only got a pass to attend the Azure dev tour, got an invite to attend Build and a wonderful gift from Allison. Thank you for showing kindness to a complete stranger. I'll never forget it.</p>\n<p><img src=\"/images/twitter4.png?raw=true\" alt=\"\"></p>\n<p>Through \"Azure Dev\" tour and \"Build\" I got to know and hang out with many Azure Advocates, and I have to say <a href=\"https://twitter.com/jeffsand\">Jeff Sandquist</a> and Microsoft have indeed assembled a group of remarkable individuals who are not only super technical and knowledgeable in their respective areas but also wonderful individuals who care deeply about DevRel and community.\nYou'll find Azure advocates speaking at many conferences and events, if you get a chance go attend one of those events, say hi to them, if you are already building on Azure platform tell them about your experience, speak to them about your design and technical problems, etc. trust me you won't regret it :)</p>\n<h2>Day 1</h2>\n<p>Day 1 keynote was split into two.</p>\n<ul>\n<li>\n<p>Vision keynote led by Microsoft CEO <a href=\"https://twitter.com/satyanadella\">Satya Nadela</a></p>\n</li>\n<li>\n<p>Technology keynote led by <a href=\"http://twitter.com/scottgu\">Scott Guthrie</a></p>\n</li>\n</ul>\n<p>Watch vision keynote <a href=\"https://youtu.be/rDLkKN8e8rA\">here</a></p>\n<p>Watch technology keynote <a href=\"https://youtu.be/G9615XmUfas\">here</a></p>\n<p>My key areas of focus through out the conference was containers, IoT, Big Data processing, AI and Machine learning.</p>\n<p>Below are links to recordings of few of my favorite sessions</p>\n<ul>\n<li>\n<p><a href=\"https://channel9.msdn.com/events/Build/2018/BRK3223\">Build Intelligent applications by infusing knowledge from the web</a></p>\n</li>\n<li>\n<p><a href=\"https://channel9.msdn.com/events/Build/2018/THR3504\">Real time data streams with Apache Kafka and Spark</a></p>\n</li>\n<li>\n<p><a href=\"https://channel9.msdn.com/Events/Build/2018/BRK2137\">What's new for Serverless Computing on Azure</a></p>\n</li>\n<li>\n<p><a href=\"https://channel9.msdn.com/events/Build/2018/BRK3802\">Azure IoT Edge: a breakthrough platform and service running cloud intelligence on any device</a></p>\n</li>\n<li>\n<p><a href=\"https://channel9.msdn.com/events/Build/2018/THR3202\">A Developer’s Introduction to Big Data Processing with Azure Databricks</a></p>\n</li>\n<li>\n<p><a href=\"https://channel9.msdn.com/events/Build/2018/THR3124\">Smart Insights with Machine Learning from Azure Monitoring</a></p>\n</li>\n</ul>\n<h2>Day 2</h2>\n<p>Day 2 technology keynote was focussed mostly on Windows and Office. You can watch the recording of Day 2 key note [here](Microsoft 365: A powerful development platform)<a href=\"https://channel9.msdn.com/Events/Build/2018/TK02\">https://channel9.msdn.com/Events/Build/2018/TK02</a></p>\n<p>Below are links to recordings of few of my favorite sessions</p>\n<ul>\n<li>\n<p><a href=\"https://channel9.msdn.com/Events/Build/2018/BRK3704\">Building Custom AI Models on Azure using TensorFlow and Keras</a></p>\n</li>\n<li>\n<p><a href=\"https://channel9.msdn.com/Events/Build/2018/BRK2120\">Getting started with containers on Azure</a></p>\n</li>\n<li>\n<p><a href=\"https://channel9.msdn.com/Events/Build/2018/THR2007\">Easily run containers on Azure using Azure Container Instances (ACI)</a></p>\n</li>\n<li>\n<p><a href=\"https://channel9.msdn.com/Events/Build/2018/THR2041\">5 Azure services every developers needs to know about</a></p>\n</li>\n<li>\n<p><a href=\"https://channel9.msdn.com/Events/Build/2018/BRK2125\">Why Kubernetes on Azure</a></p>\n</li>\n<li>\n<p><a href=\"https://channel9.msdn.com/Events/Build/2018/BRK3317\">Streaming Big Data in Azure with Kafka and Event Hubs</a></p>\n</li>\n<li>\n<p><a href=\"https://channel9.msdn.com/Events/Build/2018/BRK3213\">Deep learning at scale in Azure</a></p>\n</li>\n<li>\n<p><a href=\"https://channel9.msdn.com/Events/Build/2018/BRK3812\">Building, Running, Patching Docker Containers – The Paradigm Shift</a></p>\n</li>\n</ul>\n<p>Evening I got to attend a community event \"Building the pipeline from Prison to Tech\" organized by Azure Advocates and an organization called \"Unloop\" which focuses on enabling people who have been in prison to succeed in tech. Hearing stories from people that have gone through the program, their journey was so incredible and inspiring. I also heard Jeff Sandquist speak for the first time, you could tell from his speech he genuinely cared about the cause and called upon us to act and make a difference.</p>\n<p>Here is pic (used from Twitter) of a young lady named \"Alana Andres\" who was brave enough to share her story with us.</p>\n<p><img src=\"/images/alanaandres.jpg\" alt=\"\"></p>\n<p>There was also a panel discussion with lots of good questions and discussions. I came away inspired and wanting to do something to make a change. You can support unloop by donating, more info <a href=\"https://www.un-loop.org/donate\">here</a> I've made a monthly pledge and hoping to speak about this with our internal T-Mobile team.</p>\n<h2>Day 3</h2>\n<p>There was no technology keynote on day 3. Below are links to recordings of few of my favorite sessions</p>\n<ul>\n<li>\n<p><a href=\"https://channel9.msdn.com/Events/Build/2018/BRK2508\">Inside Azure Datacenter Architecture with Mark Russinovich</a></p>\n</li>\n<li>\n<p><a href=\"https://channel9.msdn.com/Events/Build/2018/BRK3708\">Machine Learning at Scale</a></p>\n</li>\n<li>\n<p><a href=\"https://channel9.msdn.com/Events/Build/2018/BRK2507\">An Introduction to Blockchain with Mark Russinovich</a></p>\n</li>\n<li>\n<p><a href=\"https://channel9.msdn.com/Events/Build/2018/BRK3706\">Java App Hosting: Choices!</a></p>\n</li>\n<li>\n<p><a href=\"https://channel9.msdn.com/Events/Build/2018/THR3201\">Ingestion in data pipelines with Managed Kafka Clusters in Azure HDInsight</a></p>\n</li>\n</ul>\n<p>The conference ended with a celebration at museum of pop culture <a href=\"https://www.mopop.org/\">mopop</a>.\nThis was a fun event, and there was music, food, drinks, and access to all the exhibits. As a Marvel comics fan, I enjoyed the Marvel exhibits. I've uploaded all the pictures I took while I was at build to Google photos. Check out the album <a href=\"https://photos.app.goo.gl/VwjMrqk3N5YpKUMr1\">here</a></p>\n<p>Overall build was a blast, hope to be back next year hopefully as speaker. Massive shout out to the team behind build for the job they did pulling together an event like this, finally huge thanks to Azure Advocates for inviting me. Keep rocking.</p>\n<p>Cheers,</p>\n<p>Ram</p>","id":"93c23d25-5547-5b11-814c-f893347f711a","frontmatter":{"title":"My Build 2018 Experience","date":"May 13, 2018","tags":["build","microsoft"]},"fields":{"slug":"/my-build-2018-experience/"}}},{"node":{"excerpt":"Hugo is a great OSS project that can be used to create static sites that are based on markdown files stored in a git repository. My personal blog is created using hugo and hosted on AWS S3. I recently…","html":"<p>Hugo is a great OSS project that can be used to create static sites that are based on markdown files stored in a git repository. My personal blog is created using hugo and hosted on AWS S3. I recently did some work to dockerize it and thought I'd write about it.</p>\n<p>First thing I needed to do was create a docker image with hugo installed so I can build my hugo site. For more info on the docker image see the Dockerfile contents below, you can also check out the git repository <a href=\"https://github.com/rprakashg/hugo-docker\">here</a>. As you can see from the below snippet, nothing major is going on here, I'm using golang alpine image as a base and then installing hugo and adding hugo to the system path.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM golang:1.8.3-alpine\n\nENV HUGO_VERSION 0.25 \nENV HUGO_BINARY hugo_${HUGO_VERSION}_linux-64bit \nENV PATH=/usr/local/hugo:${PATH}\n\nRUN set -x \\\n    &amp;&amp; apk upgrade --update \\\n    &amp;&amp; apk add --update ca-certificates bash curl wget \\\n    &amp;&amp; rm -rf /var/cache/apk/* \\\n    &amp;&amp; mkdir /usr/local/hugo \\\n    &amp;&amp; wget https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/${HUGO_BINARY}.tar.gz -O /usr/local/hugo/${HUGO_BINARY}.tar.gz \\\n    &amp;&amp; tar xzf /usr/local/hugo/${HUGO_BINARY}.tar.gz -C /usr/local/hugo/ \\\n  &amp;&amp; rm /usr/local/hugo/${HUGO_BINARY}.tar.gz \\\n    &amp;&amp; rm -rf /tmp/* /var/cache/apk/* </code></pre></div>\n<p>In my Dockerfile for my personal hugo based blog I use multi stage builds feature in docker to generate static HTML using hugo. As you can see from below snipped that I'm using the \"hugo-docker\" image I created as builder image and create a directory named \"blog\" under /var/www/ and copy all files into that directory.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM rprakashg/hugo-docker as builder\n\nRUN mkdir -p /var/www/blog\n\nCOPY . /var/www/blog</code></pre></div>\n<p>Next, we switch the working directory to \"/var/www/blog\" and run hugo command as shown in below snippet to generate the static HTML</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">WORKDIR /var/www/blog\n\nRUN hugo</code></pre></div>\n<p>Final image is built using the official nginx image from docker hub and we copy all generated HTML content from \"public\" folder into \"/usr/share/nginx/html\"</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM nginx\n\nCOPY --from=builder /var/www/blog/public/ /usr/share/nginx/html</code></pre></div>\n<p>You can see the full docker file <a href=\"https://raw.githubusercontent.com/rprakashg/blog/master/Dockerfile\">here</a></p>\n<p>Lastly, I threw together couple of helpful bash scripts that I can use to build and run the container so I don't have to always remember the docker commands :)</p>\n<p>The cool thing about this is I can now run my blog anywhere, I use to host my blog previously in azure with Wordpress and MySQL, by using hugo I freed myself from dependency to web servers, runtimes, databases etc. but was still dependant on AWS S3 to host the generated static HTML content. Even though its pretty minor you are sort of locked into AWS. Docker gives me freedom to run it anywhere and I love it :)</p>\n<p>Hope that helps...</p>\n<p>Cheers,</p>\n<p>Ram</p>","id":"70884df6-d575-52ab-bf71-a41cf8137683","frontmatter":{"title":"Dockerizing Hugo Sites","date":"November 11, 2017","tags":["hugo","docker","blog"]},"fields":{"slug":"/dockerizing-hugo-sites/"}}},{"node":{"excerpt":"It's extremely important to always be aware of all the announcements related to security issues for the products you use and support within your company, If you use slack we can have all these…","html":"<p>It's extremely important to always be aware of all the announcements related to security issues for the products you use and support within your company, If you use <a href=\"https://slack.com/\">slack</a> we can have all these announcements posted directly to a slack channel. In this post, I will go over how we can do just that for Docker.</p>\n<h1>Approach</h1>\n<p>You can get a list of known security vulnerabilities using <a href=\"http://www.cvedetails.com\">www.cvedetails.com</a> website. Known security vulnerabilities can be searched by the vendor, product, version etc.\nBelow RSS feed will provide you all known security vulnerabilities for Docker\n<a href=\"http://www.cvedetails.com/vulnerability-feed.php?vendor_id=13534&#x26;orderby=3&#x26;cvssscoremin=0\">http://www.cvedetails.com/vulnerability-feed.php?vendor_id=13534&#x26;orderby=3&#x26;cvssscoremin=0</a></p>\n<p>If you want to further filter down by specific product or version you can simply add \"product_id\" and/or \"version_id\" to the query string. To find the product id or version id <a href=\"http://www.cvedetails.com\">www.cvedetails.com</a> site provides product search and version search capabilities, once you have found the product through the search capability you can simply copy the product id and/or version id from the address bar in your browser and include it in the query string for above RSS feed URL</p>\n<p>From the above RSS feed URL vendor id \"13534\" is for Docker.</p>\n<p>Create a slack channel named \"docker\" in your slack workspace where we can post all security vulnerabilities related to Docker as well as have all docker related discussions.</p>\n<p>Copy the above RSS URL and issue following command in the slack channel.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/feed subscribe http://www.cvedetails.com/vulnerability-feed.php?vendor_id<span class=\"token operator\">=</span><span class=\"token number\">13534</span><span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">orderby</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">cvssscoremin</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></code></pre></div>\n<p>Before you subscribe to RSS feed verify that it's not already subscribed by issuing command below which will list out all the RSS feeds that are already subscribed</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/feed list</code></pre></div>\n<p>Once you receive an announcement you should evaluate it and if you are affected by it patch or mitigate the risk, test it and notify everyone.</p>\n<p>Hope this helps...</p>\n<p>Cheers,\nRam</p>","id":"2fa0ad21-16a7-5e7f-9322-bf288514155a","frontmatter":{"title":"Automatically get latest Docker security vulnerabilities posted to slack channel","date":"October 25, 2017","tags":["docker","cve","security","slack"]},"fields":{"slug":"/post-docker-security-updates-to-slack/"}}},{"node":{"excerpt":"What is Configuration as code? Configuration as code is a DevOps practice that promotes storing of application configuration as code within source code repository. Few key benefits that this brings is…","html":"<h2>What is Configuration as code?</h2>\n<p>Configuration as code is a DevOps practice that promotes storing of application configuration as code within source code repository. Few key benefits that this brings is that</p>\n<ul>\n<li>\n<p>Versioning of application configuration</p>\n<p>By storing the application configuration in source code repository such as Git allows us to see what configuration changes were made over a period of time and who made those changes</p>\n<p>By using branches you can isolate changes that are under development without affecting the production application</p>\n</li>\n<li>\n<p>Traceability</p>\n<p>Versioned and managed properly, can provide tracking of what version of configuration is deployed in various environments</p>\n</li>\n<li>\n<p>Make configuration changes without requiring to re-deploy application</p>\n<p>Operators would love you for this for ex. Operators can throttle logging level up in configuration settings file to troubleshoot a production issue without having to redeploy the application.</p>\n</li>\n</ul>\n<h2>Implementation</h2>\n<p>Now that we understand what configuration as code is and what benefits it brings let's take a look at how we would implement this with docker and spring boot. Spring boot provides support for keeping configuration settings in \"yml\" files instead of using a properties files, by default spring boot looks for these \"yml\" files under classpath but you can specify an explicit location by setting \"spring.config.location\" property via command line during application startup.</p>\n<p>For the purpose of this article we have stored all default configurations for this demo application application.yml file and environment specific settings are stored in application-{environment label}.yml file as shown in screen capture below</p>\n<p><img src=\"/images/dzone4.png?raw=true\" alt=\"\"></p>\n<p>Since we are running the spring boot app in docker, we can use an \"entrypoint.sh\" bash script to pull default configuration and environment specific configuration files from \"git\" repository onto directory named \"configs\" as shown below using wget command.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Downloading configuration files from git repository\"</span>\n<span class=\"token function\">wget</span>  <span class=\"token variable\">$GIT_REPO</span>/<span class=\"token variable\">$LABEL</span>/<span class=\"token variable\">$REL_PATH</span>/<span class=\"token variable\">$APP_NAME</span>.yml\n<span class=\"token function\">wget</span>  <span class=\"token variable\">$GIT_REPO</span>/<span class=\"token variable\">$LABEL</span>/<span class=\"token variable\">$REL_PATH</span>/<span class=\"token variable\">$APP_NAME</span>-<span class=\"token variable\">$PROFILE</span>.yml\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"copying yml files to configs directory\"</span>\n<span class=\"token function\">cp</span> <span class=\"token variable\">$APP_NAME</span>.yml ./configs/<span class=\"token variable\">$APP_NAME</span>.yml\n<span class=\"token function\">cp</span> <span class=\"token variable\">$APP_NAME</span>-<span class=\"token variable\">$PROFILE</span>.yml ./configs/<span class=\"token variable\">$APP_NAME</span>-<span class=\"token variable\">$PROFILE</span>.yml</code></pre></div>\n<p>As you can see from the above snippet</p>\n<ul>\n<li>\n<p>\"GIT_REPO\" environment variable is used to pass the git repository URL where the configuration files are stored.</p>\n</li>\n<li>\n<p>\"LABEL\" environment variable maps to the branch, in development/test/staging phases you might use \"MASTER\", when you release it to production you'll want to create a branch and use that branch label. This allows us to isolate changes that are under development from impacting the production application.</p>\n</li>\n<li>\n<p>\"REL_PATH\" environment variable is used to point to the location of configuration files in repo relative to the repository path.</p>\n</li>\n<li>\n<p>\"APP_NAME\" environment variable maps to file name, in the demo app I'm keeping default name \"application\"</p>\n</li>\n<li>\n<p>\"PROFILE\" environment variable maps to name of environment which the application is running. Spring boot will merge the default settings and environment specific settings and provide it to your application.</p>\n</li>\n</ul>\n<p>(Note: If your git repository requires authentication you can use ssh or HTTPS protocol with username and password to authenticate with the git repository. Docker container can obtain the credentials required to connect to git repository during startup.)</p>\n<p>Once the configuration files are downloaded from repository onto \"configs\" directory in the container we specify this location via application startup using the \"spring.config.location\" property as shown in below snippet</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">exec</span> <span class=\"token function\">java</span> <span class=\"token variable\">$JAVA_OPTS</span> <span class=\"token parameter variable\">-jar</span> /app.jar <span class=\"token parameter variable\">--spring.config.location</span><span class=\"token operator\">=</span><span class=\"token string\">\"./configs/<span class=\"token variable\">$APP_NAME</span>.yml, ./configs/<span class=\"token variable\">$APP_NAME</span>-<span class=\"token variable\">$PROFILE</span>.yml\"</span></code></pre></div>\n<h2>Running the demo application</h2>\n<p>Let's now run this demo application with staging settings as shown in command below</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span>:8080 <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">PROFILE</span><span class=\"token operator\">=</span>staging <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">GIT_REPO</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://raw.githubusercontent.com/rprakashg/blog-demos\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">LABEL</span><span class=\"token operator\">=</span>master <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">REL_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"externalize-config-demo/src/main/resources\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">APP_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"application\"</span> rprakashg/externalize-config-demo</code></pre></div>\n<p>Demo application simply displays the configuration information and you can see from the screen capture below that application has picked up default settings as well as staging environment specific settings.\n<img src=\"/images/dzone5.png?raw=true\" alt=\"\"></p>\n<p>Let's run the same demo application now with production settings as shown in snippet below.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span>:8080 <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">PROFILE</span><span class=\"token operator\">=</span>production <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">GIT_REPO</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://raw.githubusercontent.com/rprakashg/blog-demos\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">LABEL</span><span class=\"token operator\">=</span>master <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">REL_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"externalize-config-demo/src/main/resources\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">APP_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"application\"</span> rprakashg/externalize-config-demo</code></pre></div>\n<p>As you can see from the screen show below that the application now picks up default as well as production specific settings.</p>\n<p><img src=\"/images/dzone6.png?raw=true\" alt=\"\"></p>\n<h2>Source Code</h2>\n<p>All the code for the demo application is available at this github <a href=\"https://github.com/rprakashg/blog-demos/tree/master/externalize-config-demo\">repository</a></p>\n<h2>Conclusion</h2>\n<p>Configuration as code is a good practice that all development teams practicing devops should follow. Many of the benefits gained from implementing configuration as code can help increase velocity and deliver new features to your customers in production faster and help operators run and manage application in production efficiently.</p>","id":"c6b39486-e322-5d0a-9c38-78e56755a83c","frontmatter":{"title":"Configuration As Code With Docker and Spring Boot","date":"September 22, 2017","tags":["java","devops","microservices","docker"]},"fields":{"slug":"/config-as-code-with-docker-spring-boot/"}}},{"node":{"excerpt":"I made few enhancements over the weekend to seattle food truck bot. If you haven't read my previous post on seattle food truck bot I suggest you head over to this link Monday - Friday update a channel…","html":"<p>I made few enhancements over the weekend to seattle food truck bot. If you haven't read my previous post on seattle food truck bot I suggest you head over to this <a href=\"https://goo.gl/pzZWpP\">link</a></p>\n<ul>\n<li>\n<p>Monday - Friday update a channel in slack with food trucks available for a specific number of locations</p>\n<p>T-Mobile has multiple locations (Factoria, Bothell etc.) where we get food trucks for lunch. By automatically updating trucks for these locations we no longer need someone asking the bot to show trucks at these locations daily, Mon-Friday</p>\n<h3>How this is Implemented</h3>\n<p>Pretty simple, I found a golang package that implements cron spec parser and a job runner. For more information <a href=\"http://godoc.org/github.com/robfig/cron\">see</a></p>\n<p>Created a function that takes collection of locations as input and return a formatted message that can be posted to Slack channel. Using the Cron scheduler functionality in the cron package mentioned above, scheduled execution of this function at 8AM Mon-Fri and post message to slack channel configured. See sample code below</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">if len(locations) &gt; 0 &amp;&amp; channel != &quot;&quot; {\n\tfmt.Println(&quot;Creating a new instance of Cron Scheduler&quot;)\n\tc = cron.New()\n\tc.AddFunc(&quot;0 0 08 * * mon-fri&quot;, func() {\n\t\tfmt.Println(&quot;Executing func in Cron&quot;)\n\t\tmessage, err := showTrucksForLocations(locations)\n\t\tif err != nil {\n\t\t\tfmt.Println(&quot;Failed to get trucks for locations&quot;)\n\t\t} else {\n\t\t\tlog.Println(&quot;Message : &quot;, message)\n\t\t\tresponseHandler(channel, message)\n\t\t}\n\t})\n\t//Start the Cron\n\tfmt.Println(&quot;Starting Cron&quot;)\n\tc.Start()\n}</code></pre></div>\n<p>Screenshot below shows slack message posted to \"#food\" channel by the BOT for T-Mobile Factoria and Bothell locations.\n<img src=\"/images/bot10.png?raw=true\" alt=\"\"></p>\n</li>\n<li>\n<p>Format time as AM/PM</p>\n<p>Previously when the bot shows trucks at a specified location it use to display time in 24hr format. This is now changed to show time as AM/PM. See example in screenshot below</p>\n<p><img src=\"/images/bot8.png?raw=true\" alt=\"\"></p>\n</li>\n</ul>\n<h2>Deployment</h2>\n<p>If you are deploying this bot in a docker container, when you run the container LOCATION_IDS and CHANNEL environment variables need to be set as shown in example below</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run -d -e SLACK_TOKEN=&lt;replace with token> -e LOCATION_IDS=&lt;replace with comma delimited location ids you are interested> -e CHANNEL=&lt;replace with slack channel> rprakashg/foodtruck-slack-bot</code></pre></div>\n<p>If you are deploying this bot in heroku as I have done for our team, you can simply configure CHANNEL and LOCATION_IDS in heroku for the app under Config Variables in Settings tab as shown in screenshot below</p>\n<p><img src=\"/images/bot9.png?raw=true\" alt=\"\"></p>\n<p>Cheers,</p>\n<p>Ram</p>","id":"b9392a18-84fc-537c-bb10-9a9782855b77","frontmatter":{"title":"Updates To Foodtruck Bot","date":"August 13, 2017","tags":["slack","seattlefoodtruck","bot","golang"]},"fields":{"slug":"/updates-to-foodtruck-bot/"}}},{"node":{"excerpt":"Overview These days bot development is getting so popular especially with platforms like slack and teams that most companies are now using to collaborate with teams within the company as well as…","html":"<h1>Overview</h1>\n<p>These days bot development is getting so popular especially with platforms like slack and teams that most companies are now using to collaborate with teams within the company as well as external contractors and folks in external communities. I've been wanting to take a look at bot development for some time but never really just had a good use case until this last week. If you know me I'm a big foodie and I love the food trucks in Seattle. We get food trucks at T-Mobile locations in both Bellevue and Bothell, today what happens is begining of week we have a person that goes into <a href=\"http://www.seattlefoodtruck.com\">http://www.seattlefoodtruck.com</a> and prints out the food truck schedule for the whole week and pins it to a board in kitchen. If you want to know what's on today you either have to go to the seattlefoodtruck site or go look at the print out in kitchen and scroll through pages. What better use case for a bot eh?. That's exactly what I did this weekend.</p>\n<p>I decided to build the seattlefoodtruck bot using golang. With some research I found <a href=\"https://github.com/nlopes/slack\">this</a> golang package which supports most if not all of the api.slack.com REST calls, as well as the Real-Time Messaging protocol over websocket, pretty freakin cool :)</p>\n<p>Poking around the <a href=\"http://www.seattlefoodtruck.com\">SeattleFoodTruck</a> site in chrome developer tools I learned that there is a nice API that exposes all of the information such as neighborhoods, locations and trucks that are booked at those locations. Me be like my job is now easy :)</p>\n<h1>What does the seattlefoodtruck bot do?</h1>\n<p>You can ask the bot to show neighborhoods by typing command as shown below\n<img src=\"/images/bot1.png?raw=true\" alt=\"\"></p>\n<p>If everything went well bot will respond with list of neighborhoods where you can find trucks as shown below.</p>\n<p><img src=\"/images/bot2.png?raw=true\" alt=\"\"></p>\n<p>Once you find the neighborhood that you are close to from the list, you can then ask the bot to show locations at that neighborhood by typing command as shown below.\n<img src=\"/images/bot3.png?raw=true\" alt=\"\"></p>\n<p>If everything went well bot will respond with list of locations where you can find trucks as shown below. We will need the location ID to display food trucks at that specific location.\n<img src=\"/images/bot4.png?raw=true\" alt=\"\"></p>\n<p>At this point you can ask the bot to show trucks at that location by typing command as shown below.</p>\n<p><img src=\"/images/bot5.png?raw=true\" alt=\"\"></p>\n<p>If everything went well bot will show you food trucks booked at that location, date and time range when the food truck is available as well as display food categories and an image of the food truck as shown in screen capture below. Need to do some proper date time formatting but figured this will do for now :)\n<img src=\"/images/bot6.png?raw=true\" alt=\"\"></p>\n<p>Obviously once you identify the location closest to you, you can just simply run the command that shows trucks at a location. Typing help will show all the commands supported as shown in screen capture below</p>\n<p><img src=\"/images/bot7.png?raw=true\" alt=\"\"></p>\n<p>You can find the source code for the bot in this github <a href=\"https://github.com/rprakashg/foodtruck-slack-bot\">repository</a>. If you want to use this bot in your organizations channels, there is a Dockerfile included in the repository, simply docker build and run in your container platform and set SLACK_TOKEN environment variable. You will also need to configure the bot in Slack.</p>\n<p>This was a lot of fun recommend you guys to look at bot development you can automate lot of manual steps, as well as connect people with cloud services in an easy to use manner using platforms that are commonly used.</p>\n<p><em>Update 08/07/2017:</em> You can run the bot in heroku as well, today I'm running this for our team in Heroku. Travis file included in the repo can be leveraged to deploy to Heroku on checkin. Just need to update the API key. For more info see <a href=\"https://docs.travis-ci.com/user/deployment/heroku/\">Heroku Deployment</a></p>\n<p>Cheers,\nRam</p>","id":"2924a2fd-b0b8-5553-b6a8-278192e1f3ee","frontmatter":{"title":"Golang Slack Bot","date":"August 06, 2017","tags":["slack","seattlefoodtruck","bot","golang"]},"fields":{"slug":"/golang-slack-bot/"}}},{"node":{"excerpt":"Why? In Many enterprises leveraging Jenkins for running automated builds, it's quite common to have a central team providing Jenkins and other CI/CD tools as shared service. One of the issues that you…","html":"<h1>Why?</h1>\n<p>In Many enterprises leveraging Jenkins for running automated builds, it's quite common to have a central team providing Jenkins and other CI/CD tools as shared service. One of the issues that you quickly run into is that each development group within enterprise may have different platforms, frameworks, tools, libraries etc and to support the needs of everyone you end up provisioning jenkins build slaves for each group installing everything a particular group needs to be able to build/run jenkins jobs on these Jenkins slave nodes. Depending on number of groups you are supporting, this can get pretty difficult to manage. Thankfully for docker and the Jenkins community there is a docker plugin for Jenkins that can be used to dynamically provision a build slave as a docker container running on a remote docker host, run the build job and tear it down at the end of it. There a numerous benefits with this approach.</p>\n<ol>\n<li>Each development group can build the slave docker image according to their specification and through a CI process build/push the image to a docker registry keeping full ownership within the development team itself. No need to file any requests to get the tools you need installed on jenkins build slaves before your can create your CI/CD processes</li>\n<li>From an Operator's perspective you now have less number of build slaves to manage, preferably zero. I know our teams goal is to get to zero build slaves with fully dockerized approach.</li>\n</ol>\n<p>Here are the steps you can perform to leverage docker for dynamically provisioning a build slave as container:</p>\n<ul>\n<li>Install Docker Plugin</li>\n<li>Enable Docker Remote API on docker host</li>\n<li>Create a Docker image for Jenkins build slave</li>\n<li>Configure Jenkins</li>\n<li>Creating Jenkins job to run on docker</li>\n</ul>\n<h2>Install Docker Plugin</h2>\n<p>For the purposes of this post I installed a single node Jenkins server using Vagrant, I won't go too much into how I setup Jenkins as its all well documented and pretty easy to get setup. To install the docker plugin, login to Jenkins console and click on manage jenkins and from manage jenkins click on manage plugins. Switch to the available tab and you can scroll down or use the filter to find the docker plugin, select it to install. You may need to restart jenkins server for changes to get in effect.</p>\n<h2>Enable Docker Remote API on docker host</h2>\n<p>This is important step, plugin communicates with Docker via remote rest API which is turned off by default. You can enable it by simply adding below options to your dockerd startup</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</code></pre></div>\n<p>For the purposes of this demo I installed docker on centos/7 using Vagrant, if you installed docker on centos/7 you can update /usr/lib/systemd/system/docker.service file, look for ExecStart=/usr/bin/dockerd and add above options to dockerd. Restart docker by running commands below</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo systemctl daemon-reload\nsudo systemctl restart docker</code></pre></div>\n<h2>Create a Docker image for Jenkins build slave</h2>\n<p>First thing to keep in mind here is depending on the platform that you are using to build your application, choose an appropriate base image, there are lots of base images available for Java, Golang, Node etc. If none fits the bill start from scratch and add everything you need to it. Docker image should also have following:</p>\n<ol>\n<li>SSH server installed</li>\n<li>OpenJDK</li>\n<li>User that you can use to login with, typically \"jenkins\"</li>\n</ol>\n<p>Docker image should also expose port 22 for SSH and start sshd service when container is run. See an example Dockerfile that I use to create a jenkins slave image for running Hugo builds</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM golang:1.8.3-alpine\n\nMAINTAINER Ramprakash.Gopinathan@t-mobile.com\n\nENV HUGO_VERSION 0.25\nENV HUGO_BINARY hugo_${HUGO_VERSION}_linux-64bit\nENV PATH=/usr/local/hugo:${PATH}\n\nRUN set -x \\\n    &amp;&amp; apk --no-cache update \\\n    &amp;&amp; apk --no-cache upgrade \\\n    &amp;&amp; apk --no-cache add git bash curl openssh python python-dev py-pip py-pygments openjdk8 wget\\\n    &amp;&amp; ssh-keygen -A \\\n    &amp;&amp; rm -rf /var/cache/apk/* \\\n    &amp;&amp; adduser -D jenkins \\\n    &amp;&amp; echo \"jenkins:jenkins\" | chpasswd \\\n    &amp;&amp; mkdir -p /var/run/sshd \\\n    &amp;&amp; mkdir /usr/local/hugo \\\n    &amp;&amp; wget https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/${HUGO_BINARY}.tar.gz -O /usr/local/hugo/${HUGO_BINARY}.tar.gz \\\n    &amp;&amp; tar xzf /usr/local/hugo/${HUGO_BINARY}.tar.gz -C /usr/local/hugo/ \\\n\t&amp;&amp; rm /usr/local/hugo/${HUGO_BINARY}.tar.gz \\\n    &amp;&amp; pip install --upgrade pip \\\n    &amp;&amp; pip install awscli \\\n    &amp;&amp; git clone https://github.com/s3tools/s3cmd.git /opt/s3cmd \\\n    &amp;&amp; ln -s /opt/s3cmd/s3cmd /usr/bin/s3cmd \n\nEXPOSE 22\n\nCMD [\"/usr/sbin/sshd\", \"-D\"]</code></pre></div>\n<p>Build the docker image and publish to your internal private docker registry, this allows you to login to your private registry from Docker host and pull the image down. You could always run docker save command to create a tar ball and scp this to docker host and run docker load to get the image on to the docker host.</p>\n<h2>Configure Jenkins</h2>\n<p>We now need configure Jenkins to use Docker for dynamically provisioning slave as containers on docker host. Login to your Jenkins console and click on \"Manage Jenkins\" option. From manage jenkins click on \"Configure System\" option and scroll all the way to the bottom of the page.\nUnder \"Cloud\" section click on \"Add a new cloud\" button. If the plugin is installed correctly you will see \"Docker\" option as shown below.</p>\n<p><img src=\"/images/jenkins3.jpg?raw=true\" alt=\"\"></p>\n<p>Enter information about your docker host. As I mentioned earlier I setup a docker host using vagrant for the purposes of this demo and created an entry in my /etc/hosts file to map the IP address of the VM to docker.local. You can test to make sure Jenkins server is able to talk to docker host by clicking on \"Test Connection\" button. See screenshot below:</p>\n<p><img src=\"/images/jenkins4.jpg?raw=true\" alt=\"\"></p>\n<p>Next enter image information such as full image name, Labels and credential to connect to the slave, this will be the user we created in docker file for the slave image. Labels allow us to restrict the builds. See screenshot below. I've added the java image \"evarga/jenkins-slave\" and the one I've created for running hugo builds, see more on that <a href=\"https://goo.gl/5ecm2V\">here</a></p>\n<p><img src=\"/images/jenkins5.jpg?raw=true\" alt=\"\"></p>\n<h2>Creating jenkins job to run on docker</h2>\n<p>At this point you are ready to run your build jobs on docker. Simply configure your job and specify Label Expression use docker as shown below.</p>\n<p><img src=\"/images/jenkins6.jpg?raw=true\" alt=\"\"></p>\n<p>Hope this helps, As usual any comments or questions please use the disqus option below</p>\n<p>Cheers,\nRam</p>","id":"c6a957a8-8548-50c4-991b-ca2486819827","frontmatter":{"title":"Using docker for dynamically provisioning jenkins build slaves and running build jobs","date":"July 08, 2017","tags":["jenkins","docker"]},"fields":{"slug":"/jenkins-build-slave-as-container/"}}},{"node":{"excerpt":"Overview At T-Mobile we are starting to leverage Hugo which is an OSS static site generator tool for a few marketing type of sites. We are also huge Jenkins shop and run jenkins build slaves in docker…","html":"<h1>Overview</h1>\n<p>At T-Mobile we are starting to leverage <a href=\"http://gohugo.io\">Hugo</a> which is an OSS static site generator tool for a few marketing type of sites. We are also huge Jenkins shop and run jenkins build slaves in docker and Mesos/Marathon. We use S3 bucket for hosting content generated, cloudfront for global content delivery and route 53 for DNS. I've created a docker jenkins build slave image for building hugo projects in Jenkins. Image comes preloaded with Hugo and AWS CLI along with S3Cmd utility that is typically used for syncing content to S3 bucket.</p>\n<p>If you are using Hugo and Jenkins you'll find this image useful. Image is available in docker hub. You can run command below to pull the image down to your docker host that your are using with Jenkins. If you have any issues and or comments or questions let me know.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker pull rprakashg/hugo-jenkins-build-slave</code></pre></div>\n<p>Git repository for this image is <a href=\"http://github.com/rprakashg/hugo-jenkins-build-slave\">here</a></p>\n<p>Cheers,</p>\n<p>Ram</p>","id":"e90a1166-b4c4-5650-ae84-1aef654cee74","frontmatter":{"title":"Jenkins Build Slave Image For Building Hugo Projects","date":"July 08, 2017","tags":["jenkins","docker","hugo"]},"fields":{"slug":"/hugo-jenkins-build-slave-image/"}}},{"node":{"excerpt":"Overview Application Telemetry is one of the key practices that is required to diagnose the health of your application or microservice. At T-Mobile like most of the organizations practicing DevOps we…","html":"<h1>Overview</h1>\n<p>Application Telemetry is one of the key practices that is required to diagnose the health of your application or microservice. At T-Mobile like most of the organizations practicing DevOps we are also big on telemetry. In this post I will walk through how we collect what we call RED metrics from application code. RED stands for Request rate, Error rate, Duration (Latency). Additionaly we also collect metrics on resource consumption. Most of our code is written in Java so this is mostly JVM metrics.</p>\n<h2>Approach</h2>\n<p>In a typical SpringBoot based Microservice there are multiple types and objects so our metrics collection solution needed to address some of the cross cutting scenarios. Thanks to AOP Support in SpringBoot this was pretty easy to implement.</p>\n<h3>What is AOP</h3>\n<p>AOP stands for Aspect Oriented Programming, unlike Object Oriented Programming (OOP) where the unit of modularity is a class, in AOP this is called an Aspect, hence Aspect oriented programming. Aspect enable modularization of concerns such as transaction management, RED metrics collection I referred to earlier, etc. that cut across multiple types and objects</p>\n<h3>Tools and Libraries used</h3>\n<p>For collecting metrics from the application we use a library from <a href=\"http://metrics.dropwizard.io/3.2.2/\">DropWizard</a>. Core dropwizard metrics library is added as dependency as shown below</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- drop wizard --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.dropwizard.metrics<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>metrics-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>${dropwizard-metrics.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>For collecting JVM metrics to get insights into resource consumption, metrics jvm library dependency is added to maven pom.xml as shown below</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.dropwizard.metrics<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>metrics-jvm<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>${dropwizard-metrics.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>For storing metrics in Graphite, Dropwizard provides a library that includes graphite reporting capabilities. You can pull this dependency into your project by updating your pom.xml as shown below</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.dropwizard.metrics<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>metrics-graphite<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>${dropwizard-metrics.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>We also use a library <a href=\"http://metrics.ryantenney.com/\">Metrics for Spring</a> which is a module that integrates dropwizard metrics library with Spring.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- ryantenney metrics --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.ryantenney.metrics<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>metrics-spring<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Additionally to leverage Spring AOP support we will need to add \"spring-boot-starter-aop\" dependency as shown below</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- Spring AOP + aspectJ --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>${spring.boot.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Graphite for storing metrics from microservices and grafana for visualization of these metrics. For the purposes of this blog post I'm running both graphite and grafana in a container and I have created a docker-compose file.</p>\n<h3>Metrics Collector Aspect</h3>\n<p>Annotate class with \"@Aspect\" to tell Spring AOP Framework that the specific class is an Aspect. In my case I named this class MetricsCollector. This class has a method called \"CollectMetrics\" which includes an \"Around\" advice that invokes a PointCut expression that looks for any method that has an \"CollectMetrics\" annotation. Many AOP frameworks including Spring, model an advice as an interceptor. See the code from the MetricsCollector aspect below.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MetricsCollector</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> <span class=\"token constant\">LOG</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetricsCollector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ExtendedMetricRegistry</span> metricRegistry<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(collectMetrics)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">collectable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CollectMetrics</span> collectMetrics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"collectable(collectMetrics)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">collectMetrics</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CollectMetrics</span> collectMetrics<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Object</span> targetObject<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// start  timer</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Timer<span class=\"token punctuation\">.</span>Context</span> timerContext <span class=\"token operator\">=</span> metricRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetricRegistry</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExtendedMetricRegistry</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DURATION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//increment total requests meter</span>\n        metricRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">meter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetricRegistry</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExtendedMetricRegistry</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUESTS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// log arguments</span>\n            <span class=\"token function\">logArguments</span><span class=\"token punctuation\">(</span>pjp<span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            targetObject <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> elapsed <span class=\"token operator\">=</span> timerContext<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            metricRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">recordTime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetricRegistry</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">,</span> metricRegistry<span class=\"token punctuation\">.</span><span class=\"token constant\">DURATION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> elapsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> targetObject<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@AfterThrowing</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"@annotation(com.rprakashg.sb.samples.CollectMetrics)\"</span><span class=\"token punctuation\">,</span> throwing <span class=\"token operator\">=</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">JoinPoint</span> jp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> jp<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        metricRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">meter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetricRegistry</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">,</span> metricRegistry<span class=\"token punctuation\">.</span><span class=\"token constant\">ERRORS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logArguments</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> arguments <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">LOG</span><span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token constant\">LOG</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Executing method: [ {} ] with arguments: {}. \"</span><span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the code above you can see we are using a Timer for capturing duration of the method call as well as incrementing REQUESTS meter when ever method is called and if any exception is thrown inside the method, ERRORS meter is also incremented.</p>\n<p>For collecting metrics on resource consumption we simply are adding all the JVM metrics. You can see in below code from Spring Application Configuration class that initializes an ExtendedMetricsRegistry which is a simple wrapper class around MetricsRegistry in DropWizard library</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationConfig</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ExtendedMetricRegistry</span> emr<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.application.name}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> appName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ExtendedMetricRegistry</span> <span class=\"token function\">extendedMetricRegistry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">MetricsConfig</span> metricsConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        emr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExtendedMetricRegistry</span><span class=\"token punctuation\">(</span>appName<span class=\"token punctuation\">,</span> metricsConfig<span class=\"token punctuation\">.</span><span class=\"token function\">getMetricRegistry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emr<span class=\"token punctuation\">.</span><span class=\"token function\">registerGCMetricSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emr<span class=\"token punctuation\">.</span><span class=\"token function\">registerBufferPoolMetricSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emr<span class=\"token punctuation\">.</span><span class=\"token function\">registerMemoryUsageGuageSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emr<span class=\"token punctuation\">.</span><span class=\"token function\">registerThreadStatesGuageSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> emr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To demonstrate the usage of metrics collection I wrote a sample Microservice that uses YAHOO api for looking up stock prices for a specific symbol you pass. To automatically collect RED metrics from any method we can simply add @CollectMetrics(true) annotation as shown below and voila we have metrics :)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoServiceController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> <span class=\"token constant\">LOG</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DemoServiceController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StockQuoteService</span> service<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@CollectMetrics</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/quotes/{tickerSymbol}\"</span><span class=\"token punctuation\">,</span>\n            produces <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"application/json\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            consumes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"application/json\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Quote</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStockQuote</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tickerSymbol\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> tickerSymbol<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BackendServiceException</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Response</span> r <span class=\"token operator\">=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getStockQuote</span><span class=\"token punctuation\">(</span>tickerSymbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">getQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQuote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There is also a Dockerfile for containerizing the Java SpringBoot application. Additionally I've included a Docker-Compose file to get the entire stack up and running.</p>\n<p>If you are interested in seeing this in action simply clone this repo as shown below</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git clone https://github.com/rprakashg/metrics-demo.git</code></pre></div>\n<p><em>Updates 07/03/2017: Updated dockerfile to leverage docker multi stage builds as a result mvn clean install no longer needs to be run</em>\n<del> Swtich directory to metrics-demo/metrics-common and run mvn command below to compile and install the jar in your local maven repo.</del></p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> mvn clean install</span></code></pre></div>\n<p><del>Next switch the directory to \"stock-quote-service\" directory under \"metrics-demo\" and run the same maven command as above.\nChange the directory back to \"metrics-demo\" and simply run the docker-compose command shown below. This will build a container image for stock-quote-service microservice.</del>\nBuild the stock quote demo service by running the docker-compose command below.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker-compose -f metrics.yml build</code></pre></div>\n<p>Run the entire application including graphite and grafana monitoring stack by running following command below.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker-compose -f metrics.yml up</code></pre></div>\n<h3>Metrics in Grafana</h3>\n<p>I ran a few tests from postman against the stock-quote-service API and here is a sample dashboard showing RED metrics in action\n<img src=\"/images/metrics.jpg?raw=true\" alt=\"\"></p>\n<p>All the code is in this github <a href=\"https://github.com/rprakashg/metrics-demo\">repo</a> Let me know if you have any comments or feedback.</p>\n<p>Cheers,</p>\n<p>Ram</p>","id":"e9b36420-fc3e-5e71-82a8-d31a54e5dd4c","frontmatter":{"title":"Using spring aop for automatic collection of metrics from your SpringBoot based Microservice","date":"June 29, 2017","tags":["springboot","metrics","telemetry","dropwizard","graphite","grafana"]},"fields":{"slug":"/using-spring-aop-for-metrics-collection/"}}},{"node":{"excerpt":"Overview Kinesis firehose is a managed service within AWS that can be used to capture streaming data and load it into Kinesis Analytics, S3, Amazon Redshift or Amazon ElasticSearch services. I've…","html":"<h1>Overview</h1>\n<p>Kinesis firehose is a managed service within AWS that can be used to capture streaming data and load it into Kinesis Analytics, S3, Amazon Redshift or Amazon ElasticSearch services. I've published a cloudformation template that automates provisioning of all required components for Kinesis Firehose with AWS S3 delivery on your AWS account. You can find more info about the cloudformation template <a href=\"https://github.com/rprakashg/cf-templates/tree/master/firehose-with-s3-destination\">here</a></p>\n<p>One thing I should point out is one of the thing template does is it provisions a KMS key which is used to encrypt/decrypt data ingested at REST. If you want to give others access to read this data from S3 in addition to granting read access to S3 bucket you'll also need to grant DECRYPT permission in your KMS key policy. I din't add this into the template because I don't think it would be good idea to allow decrypt permission to all by default. So depending on your use case if you need to allow consuming applications read access to this data you will need to modify the KMS key policy and grant 'Decrypt' permission as shown below</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    \"Sid\": \"Allow decrypt\",\n    \"Effect\": \"Allow\",\n    \"Principal\": {\n        //include service or principal depending on your usecase\n    },\n    \"Action\": \"kms:Decrypt\",\n    \"Resource\": \"*\"\n}</code></pre></div>\n<p>Hope that helps.</p>\n<p>Cheers,</p>\n<p>Ram</p>","id":"1703a8ca-a1e9-53c2-a5e0-51fe01530b8f","frontmatter":{"title":"Cloudformation template for provisioning firehose with S3 delivery","date":"June 27, 2017","tags":["cloud","cloudformation","aws","kinesis","firehose"]},"fields":{"slug":"/cf-template-for-kinesis-firehose/"}}},{"node":{"excerpt":"At T-Mobile we use jFrog artifactory as a centralized repository for storing artifacts. It is one of the key tools in our DevOps toolset and is integrated into our CI/CD processes. Artifactory has…","html":"<p>At T-Mobile we use jFrog <a href=\"https://www.jfrog.com/artifactory/\">artifactory</a> as a centralized repository for storing artifacts. It is one of the key tools in our DevOps toolset and is integrated into our CI/CD processes. Artifactory has support for storing docker images in repositories, essentially its like running private docker registries.\nArtifactory lets you create multiple docker repositories which is pretty nice for a large company like T-Mobile where there are numerous groups developing dockerized microservices, each group can have thier own repository (registry in docker terminology) with right level of access control that governs who can push images into it.</p>\n<p>If you are using Artifactory for hosting private Docker registries in enterprise, below are few things to keep in mind. Later I will cover how we have addressed these.</p>\n<ul>\n<li>\n<p>Discovering images that are stored in multiple repositories</p>\n<p>With flexibility of running multiple docker registries, discovering images becomes bit of a challenge, artifactory web portal has some nice search functionality built in which helps, but if you are in docker cli you have to know the name of the repository before you can search or pull the image down</p>\n</li>\n<li>\n<p>Governing Use of Docker Images from Docker Hub</p>\n<p>Docker hub is public registry where thousands of open source developers and ISVs are publishing docker images for thier products. In the enterprise it becomes critical to ensure the use of appropriate images for production deployment. You don't want a group by mistake use an image that has security vulnerabilities or is not certified by docker to run well on docker platforms. The new docker store addresses some of these challenges enterprises face but governing use of docker images for production still is a critical things every enterprise needs to ensure.</p>\n</li>\n<li>\n<p>Promoting docker images to release registry</p>\n<p>One of the policies we have is any docker image deployed to our production Mesos stack has to come from release repository in artifactory. Only the service account used by Jenkins job has rights to push to release registry. For those who might be new to Artifactory, when you create docker repository in Artifactory, artifactory creates \"<em>-snapshot-local\" and \"</em>-release-local\" repositories. Snapshot is where images that are still in development stored, before a docker image is deployed to production they get promoted to release repository. Another benefit with this model is that you can have seperate retention policies for images stored in these repos, for ex. We have a default 15 day retention policy for anything in Snapshot, you can request to increase this. Obviously images in release repo has unlimited retention</p>\n</li>\n</ul>\n<h2>How did we address the above three things</h2>\n<p>For the first bullet point, we use a virtual docker repository that aggregates images from all docker repositories in artifactory. Few benefits of doing this is that</p>\n<ol>\n<li>\n<p>It Provides a single endpoint for developers to resolve images from docker registries in artifactory. This is huge in the enterprise, think about in the past if you needed to reuse something another group had built, I can tell you it almost never happens, there are many reasons for this which I wont get in to but in summary lots of duplication of effort is what ends up happening. Containerization movement within our company and use of Docker and Artifactory is really changing how teams work, there is less duplication, developers can build/push images into docker registries in artifactory and other developers inside and outside of their respective groups can discover and use these images avoiding duplication of efforts etc.</p>\n</li>\n<li>\n<p>The other key benefit is IT operators can manage these docker registries such as moving/consolidating images or modify include and exclude patterns to enfore security policies without worrying about impacting developers.</p>\n</li>\n</ol>\n<p>For the second bullet point we are using remote repository which is seeded with approved images for production use from docker hub. Virtual repository also aggregates images from remote repository freeing developers to ever needing to pull any image from docker hub.</p>\n<p>For the third bullet point we use docker tagging in Jenkins job to promote images that are ready for production deployment from snapshot to release.</p>\n<p>Jenkins job first we pull the image from snapshot registry as shown below...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker pull {artifactory host}/{docker snapshot registry}/{image name}:{tag} \n</code></pre></div>\n<p>Next we use docker tagging to include release registry as shown below</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker tag {artifactory host}/{docker snapshot registry}/{image name}:{tag} {artifactory host}/{docker release registry}/{image name}:{tag}</code></pre></div>\n<p>Lastly we use docker push to promote the image to release registry</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker push artifactory host}/{docker release registry}/{image name}:{tag}</code></pre></div>\n<p>Below is a diagram that shows how we use artifactory for hosting private docker registries</p>\n<p><img src=\"http://rprakashg.github.io/images/artifactory.jpg\" alt=\"artifactory structure\"></p>","id":"b4c5718e-8488-5ff5-b3c9-6c39b099665c","frontmatter":{"title":"Some thoughts on running docker registries in jFrog artifactory","date":"May 07, 2017","tags":["docker","artifactory","registry","discovery"]},"fields":{"slug":"/docker-registries-with-artifactory/"}}},{"node":{"excerpt":"Why changing the blogging platform There is two main reasons why I switched hugo for blogging. Speed (No more dynamic rendering of pages based on content stored in databases) Cost Hugo gives me…","html":"<h2>Why changing the blogging platform</h2>\n<p>There is two main reasons why I switched hugo for blogging.</p>\n<ul>\n<li>Speed (No more dynamic rendering of pages based on content stored in databases)</li>\n<li>Cost</li>\n</ul>\n<p>Hugo gives me freedom from needing any runtimes or databases which equates to speed since the entire site is just plain old HTML generated out of markdown files. Additionally my current wordpress blog hosted on Azure with ClearDB is running out of space available for free tier and is requiring me to upgrade to paid membership.</p>\n<p>I wanted to author blog posts using markdown format, VisualStudio Code provides great support for markdown authoring. Posts authored in markdown format are stored in a github <a href=\"http://github.com/rprakashg/blog\">repository</a>. Additionally I needed a continous publishing process that builds the site using hugo and publishes generated content when ever changes are committed to github repository.</p>\n<h2>Hosting platform</h2>\n<p>For hosting I decided to use AWS S3 with Cloudfront which gives me low cost storage and global content delivery.</p>\n<h2>Provisioning AWS components</h2>\n<p>Creating a new site and configuring it for blog was pretty easy and straightforward, I'm not going to go into details as there is plenty of articles and even documentation available at <a href=\"http://gohugo.io\">gohugo.io</a> site how ever I ran into some challenges with S3 + Cloudfront hosting. I came across a <a href=\"https://s3-us-west-2.amazonaws.com/cloudformation-templates-us-west-2/S3_Website_With_CloudFront_Distribution.template\">sample template</a> for S3 hosting but quickly ran into few limitations</p>\n<ol>\n<li>After I setup continuous publishing from Travis-CI I was getting access denied when accessing items in the bucket even though the bucket had public read enabled, this is primarily due to the fact that there is no concept of inheriting permissions in S3. I ended up having to create a bucket policy that granted read access to everything in the bucket to everyone</li>\n<li>Since one of my goal with this move was to setup continous publishing from Travis-CI when ever changes are committed to the github repository, it required me to create an AWS IAM user with full rights to S3 bucket hosting the content, additionally I needed to invalidate the cloudfront distribution when ever changes are published to the S3 bucket so user's can see fresh content, this required few cloudfront specific permissions granted to the user.</li>\n</ol>\n<p>Because of the reasons mentioned above and a few other flexibilities I was looking for, I ended up creating a custom cloudformation template. You can find the template <a href=\"http://github.com/rprakashg/cf-templates\">here</a>. If you want to leverage hugo for hosting your blog or other types of sites along with S3 + Cloudfront for hosting and content delivery, you will find this template very useful as it will get you almost 98% of the way. Once stack is created using the template you can simply copy the nameservers from the hosted zone created and update your domain settings in godaddy or what ever hosting provider you use.</p>\n<h2>Creating the stack</h2>\n<p>After you clone the <a href=\"http://github.com/rprakashg/cf-templates\">repo</a>, simply change the default template parameter values in template.parameters.json file to match your needs. Script uses AWS cli create-stack command to create the stack. If you are using OSX you can run command below to create the stack</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">./create-stack.sh</code></pre></div>\n<p>Once the stack is created successfully simply login to your AWS console and navigate to Route 53 hosted zone that was created by the cloudformation template and copy the name servers list and update your domain settings and replace nameservers with the one's you copied from the hosted zone recordset</p>\n<h2>Deleting stack</h2>\n<p>I've also included a simple script to delete the stack, script will grab the stack name from template.parameters.json file and deletes the stack using AWS cli delete-stack command. Run command below to delete stack</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">./delete-stack.sh</code></pre></div>\n<h2>Continuous publishing</h2>\n<p>As mentioned earlier one of my goal was to continuously publish to S3 bucket when new content or changes to existing content are committed to github repository. I'm using Travis-CI for this. If you are not familiar with Travis head over to <a href=\"http://travis-ci.org\">Travis-CI.org</a> for more info.</p>\n<p>See my <a href=\"http://github.com/rprakashg/blog/blob/master/.travis.yml\">.travis.yml</a> for reference.</p>\n<p>As you can see from my travis file I install hugo, then generate site content by running hugo command in script section. For deploying to S3 I'm using the S3 deployment support available in Travis-CI. For more information please <a href=\"https://docs.travis-ci.com/user/deployment/s3/\">see</a>. I've also added AWS Credential ID and Secret Key for the IAM build user that gets created as a part of creating the stack using the cloudformation template. AWS Credentials are stored encrypted. For more information on adding encrypted environment variables <a href=\"https://docs.travis-ci.com/user/environment-variables/#Defining-encrypted-variables-in-.travis.yml\">see</a>. Finally after successfully publishing content we invalidate cloudfront distribution by running a script. Download the cloudfront invalidation script <a href=\"https://github.com/rprakashg/blog/blob/master/cdn-invalidate.sh\">here</a>. Big thanks to <a href=\"https://www.whaletech.co/about/\">Ben Whaley</a> for the cloudfront invalidation script.</p>","id":"862f5aa1-511e-5b76-a393-1622e9f42224","frontmatter":{"title":"New blog","date":"April 24, 2017","tags":["aws","s3","cloudfront","hugo","website","hosting"]},"fields":{"slug":"/new-blog/"}}},{"node":{"excerpt":"It was quite strange how I ended up working at T-Mobile, I had wrapped up a contract with Microsoft in November of 2015 and was looking for the next gig when I got the opportunity to interview with T…","html":"<p>It was quite strange how I ended up working at T-Mobile, I had wrapped up a contract with Microsoft in November of 2015 and was looking for the next gig when I got the opportunity to interview with T-Mobile. After my interview I never thought I would end up getting the gig because my background was in Azure and Microsoft stack and the group I interviewed with was on Java/OSS workloads and on AWS. Even though I got the gig I was not sure if it would be a good move. Since I was doing training between consulting gigs I din't feel like I should rush getting into a gig.</p>\n<p>I've never been one hesitant to make changes and the opportunity to work on AWS, Microservices, OSS stack was too good to pass.\n2016 ended up being a good year as I worked my behind off learning and transitioning to AWS cloud, Linux &#x26; OSS technologies, I gained many new skills but most importantly deployed many dockerized microservices and numerous other features and enhancements to production. During this time I gained many new friends and work became fun for me again. I had found my passion that I had lost somewhere down the line.</p>\n<p>After contracting with T-Mobile for a year I've accepted a full time opportunity as Principal Architect on January 17th of this year.</p>\n<p>Moral of the story? Keep an open mind, work your behind off, see the big picture, don't hesitate to make changes, you must definitely catch the trend and ride it and most importantly have fun doing it.</p>\n<p>Cheers,\nRam</p>","id":"1c24cd54-6874-5ea5-b8c7-6374ee0566e7","frontmatter":{"title":"New beginings","date":"February 19, 2017","tags":null},"fields":{"slug":"/new-beginings/"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["1611934721","2366241629"]}