{"componentChunkName":"component---src-templates-post-list-js","path":"/7/","result":{"data":{"site":{"siteMetadata":{"title":"rprakashg.github.io","author":"RAM GOPINATHAN"}},"allMarkdownRemark":{"totalCount":28,"edges":[{"node":{"excerpt":"What is Configuration as code? Configuration as code is a DevOps practice that promotes storing of application configuration as code within source code repository. Few key benefits that this brings isâ€¦","html":"<h2>What is Configuration as code?</h2>\n<p>Configuration as code is a DevOps practice that promotes storing of application configuration as code within source code repository. Few key benefits that this brings is that</p>\n<ul>\n<li>\n<p>Versioning of application configuration</p>\n<p>By storing the application configuration in source code repository such as Git allows us to see what configuration changes were made over a period of time and who made those changes</p>\n<p>By using branches you can isolate changes that are under development without affecting the production application</p>\n</li>\n<li>\n<p>Traceability</p>\n<p>Versioned and managed properly, can provide tracking of what version of configuration is deployed in various environments</p>\n</li>\n<li>\n<p>Make configuration changes without requiring to re-deploy application</p>\n<p>Operators would love you for this for ex. Operators can throttle logging level up in configuration settings file to troubleshoot a production issue without having to redeploy the application.</p>\n</li>\n</ul>\n<h2>Implementation</h2>\n<p>Now that we understand what configuration as code is and what benefits it brings let's take a look at how we would implement this with docker and spring boot. Spring boot provides support for keeping configuration settings in \"yml\" files instead of using a properties files, by default spring boot looks for these \"yml\" files under classpath but you can specify an explicit location by setting \"spring.config.location\" property via command line during application startup.</p>\n<p>For the purpose of this article we have stored all default configurations for this demo application application.yml file and environment specific settings are stored in application-{environment label}.yml file as shown in screen capture below</p>\n<p><img src=\"/images/dzone4.png?raw=true\" alt=\"\"></p>\n<p>Since we are running the spring boot app in docker, we can use an \"entrypoint.sh\" bash script to pull default configuration and environment specific configuration files from \"git\" repository onto directory named \"configs\" as shown below using wget command.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Downloading configuration files from git repository\"</span>\n<span class=\"token function\">wget</span>  <span class=\"token variable\">$GIT_REPO</span>/<span class=\"token variable\">$LABEL</span>/<span class=\"token variable\">$REL_PATH</span>/<span class=\"token variable\">$APP_NAME</span>.yml\n<span class=\"token function\">wget</span>  <span class=\"token variable\">$GIT_REPO</span>/<span class=\"token variable\">$LABEL</span>/<span class=\"token variable\">$REL_PATH</span>/<span class=\"token variable\">$APP_NAME</span>-<span class=\"token variable\">$PROFILE</span>.yml\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"copying yml files to configs directory\"</span>\n<span class=\"token function\">cp</span> <span class=\"token variable\">$APP_NAME</span>.yml ./configs/<span class=\"token variable\">$APP_NAME</span>.yml\n<span class=\"token function\">cp</span> <span class=\"token variable\">$APP_NAME</span>-<span class=\"token variable\">$PROFILE</span>.yml ./configs/<span class=\"token variable\">$APP_NAME</span>-<span class=\"token variable\">$PROFILE</span>.yml</code></pre></div>\n<p>As you can see from the above snippet</p>\n<ul>\n<li>\n<p>\"GIT_REPO\" environment variable is used to pass the git repository URL where the configuration files are stored.</p>\n</li>\n<li>\n<p>\"LABEL\" environment variable maps to the branch, in development/test/staging phases you might use \"MASTER\", when you release it to production you'll want to create a branch and use that branch label. This allows us to isolate changes that are under development from impacting the production application.</p>\n</li>\n<li>\n<p>\"REL_PATH\" environment variable is used to point to the location of configuration files in repo relative to the repository path.</p>\n</li>\n<li>\n<p>\"APP_NAME\" environment variable maps to file name, in the demo app I'm keeping default name \"application\"</p>\n</li>\n<li>\n<p>\"PROFILE\" environment variable maps to name of environment which the application is running. Spring boot will merge the default settings and environment specific settings and provide it to your application.</p>\n</li>\n</ul>\n<p>(Note: If your git repository requires authentication you can use ssh or HTTPS protocol with username and password to authenticate with the git repository. Docker container can obtain the credentials required to connect to git repository during startup.)</p>\n<p>Once the configuration files are downloaded from repository onto \"configs\" directory in the container we specify this location via application startup using the \"spring.config.location\" property as shown in below snippet</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">exec</span> <span class=\"token function\">java</span> <span class=\"token variable\">$JAVA_OPTS</span> <span class=\"token parameter variable\">-jar</span> /app.jar <span class=\"token parameter variable\">--spring.config.location</span><span class=\"token operator\">=</span><span class=\"token string\">\"./configs/<span class=\"token variable\">$APP_NAME</span>.yml, ./configs/<span class=\"token variable\">$APP_NAME</span>-<span class=\"token variable\">$PROFILE</span>.yml\"</span></code></pre></div>\n<h2>Running the demo application</h2>\n<p>Let's now run this demo application with staging settings as shown in command below</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span>:8080 <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">PROFILE</span><span class=\"token operator\">=</span>staging <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">GIT_REPO</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://raw.githubusercontent.com/rprakashg/blog-demos\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">LABEL</span><span class=\"token operator\">=</span>master <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">REL_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"externalize-config-demo/src/main/resources\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">APP_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"application\"</span> rprakashg/externalize-config-demo</code></pre></div>\n<p>Demo application simply displays the configuration information and you can see from the screen capture below that application has picked up default settings as well as staging environment specific settings.\n<img src=\"/images/dzone5.png?raw=true\" alt=\"\"></p>\n<p>Let's run the same demo application now with production settings as shown in snippet below.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span>:8080 <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">PROFILE</span><span class=\"token operator\">=</span>production <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">GIT_REPO</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://raw.githubusercontent.com/rprakashg/blog-demos\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">LABEL</span><span class=\"token operator\">=</span>master <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">REL_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"externalize-config-demo/src/main/resources\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">APP_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"application\"</span> rprakashg/externalize-config-demo</code></pre></div>\n<p>As you can see from the screen show below that the application now picks up default as well as production specific settings.</p>\n<p><img src=\"/images/dzone6.png?raw=true\" alt=\"\"></p>\n<h2>Source Code</h2>\n<p>All the code for the demo application is available at this github <a href=\"https://github.com/rprakashg/blog-demos/tree/master/externalize-config-demo\">repository</a></p>\n<h2>Conclusion</h2>\n<p>Configuration as code is a good practice that all development teams practicing devops should follow. Many of the benefits gained from implementing configuration as code can help increase velocity and deliver new features to your customers in production faster and help operators run and manage application in production efficiently.</p>","id":"c6b39486-e322-5d0a-9c38-78e56755a83c","frontmatter":{"title":"Configuration As Code With Docker and Spring Boot","date":"September 22, 2017","tags":["java","devops","microservices","docker"],"author":"Ram Gopinathan"},"fields":{"slug":"/config-as-code-with-docker-spring-boot/"}}},{"node":{"excerpt":"I made few enhancements over the weekend to seattle food truck bot. If you haven't read my previous post on seattle food truck bot I suggest you head over to this link Monday - Friday update a channelâ€¦","html":"<p>I made few enhancements over the weekend to seattle food truck bot. If you haven't read my previous post on seattle food truck bot I suggest you head over to this <a href=\"https://goo.gl/pzZWpP\">link</a></p>\n<ul>\n<li>\n<p>Monday - Friday update a channel in slack with food trucks available for a specific number of locations</p>\n<p>T-Mobile has multiple locations (Factoria, Bothell etc.) where we get food trucks for lunch. By automatically updating trucks for these locations we no longer need someone asking the bot to show trucks at these locations daily, Mon-Friday</p>\n<h3>How this is Implemented</h3>\n<p>Pretty simple, I found a golang package that implements cron spec parser and a job runner. For more information <a href=\"http://godoc.org/github.com/robfig/cron\">see</a></p>\n<p>Created a function that takes collection of locations as input and return a formatted message that can be posted to Slack channel. Using the Cron scheduler functionality in the cron package mentioned above, scheduled execution of this function at 8AM Mon-Fri and post message to slack channel configured. See sample code below</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">if len(locations) &gt; 0 &amp;&amp; channel != &quot;&quot; {\n\tfmt.Println(&quot;Creating a new instance of Cron Scheduler&quot;)\n\tc = cron.New()\n\tc.AddFunc(&quot;0 0 08 * * mon-fri&quot;, func() {\n\t\tfmt.Println(&quot;Executing func in Cron&quot;)\n\t\tmessage, err := showTrucksForLocations(locations)\n\t\tif err != nil {\n\t\t\tfmt.Println(&quot;Failed to get trucks for locations&quot;)\n\t\t} else {\n\t\t\tlog.Println(&quot;Message : &quot;, message)\n\t\t\tresponseHandler(channel, message)\n\t\t}\n\t})\n\t//Start the Cron\n\tfmt.Println(&quot;Starting Cron&quot;)\n\tc.Start()\n}</code></pre></div>\n<p>Screenshot below shows slack message posted to \"#food\" channel by the BOT for T-Mobile Factoria and Bothell locations.\n<img src=\"/images/bot10.png?raw=true\" alt=\"\"></p>\n</li>\n<li>\n<p>Format time as AM/PM</p>\n<p>Previously when the bot shows trucks at a specified location it use to display time in 24hr format. This is now changed to show time as AM/PM. See example in screenshot below</p>\n<p><img src=\"/images/bot8.png?raw=true\" alt=\"\"></p>\n</li>\n</ul>\n<h2>Deployment</h2>\n<p>If you are deploying this bot in a docker container, when you run the container LOCATION_IDS and CHANNEL environment variables need to be set as shown in example below</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run -d -e SLACK_TOKEN=&lt;replace with token> -e LOCATION_IDS=&lt;replace with comma delimited location ids you are interested> -e CHANNEL=&lt;replace with slack channel> rprakashg/foodtruck-slack-bot</code></pre></div>\n<p>If you are deploying this bot in heroku as I have done for our team, you can simply configure CHANNEL and LOCATION_IDS in heroku for the app under Config Variables in Settings tab as shown in screenshot below</p>\n<p><img src=\"/images/bot9.png?raw=true\" alt=\"\"></p>\n<p>Cheers,</p>\n<p>Ram</p>","id":"b9392a18-84fc-537c-bb10-9a9782855b77","frontmatter":{"title":"Updates To Foodtruck Bot","date":"August 13, 2017","tags":["slack","seattlefoodtruck","bot","golang"],"author":"Ram Gopinathan"},"fields":{"slug":"/updates-to-foodtruck-bot/"}}},{"node":{"excerpt":"Overview These days bot development is getting so popular especially with platforms like slack and teams that most companies are now using to collaborate with teams within the company as well asâ€¦","html":"<h1>Overview</h1>\n<p>These days bot development is getting so popular especially with platforms like slack and teams that most companies are now using to collaborate with teams within the company as well as external contractors and folks in external communities. I've been wanting to take a look at bot development for some time but never really just had a good use case until this last week. If you know me I'm a big foodie and I love the food trucks in Seattle. We get food trucks at T-Mobile locations in both Bellevue and Bothell, today what happens is begining of week we have a person that goes into <a href=\"http://www.seattlefoodtruck.com\">http://www.seattlefoodtruck.com</a> and prints out the food truck schedule for the whole week and pins it to a board in kitchen. If you want to know what's on today you either have to go to the seattlefoodtruck site or go look at the print out in kitchen and scroll through pages. What better use case for a bot eh?. That's exactly what I did this weekend.</p>\n<p>I decided to build the seattlefoodtruck bot using golang. With some research I found <a href=\"https://github.com/nlopes/slack\">this</a> golang package which supports most if not all of the api.slack.com REST calls, as well as the Real-Time Messaging protocol over websocket, pretty freakin cool :)</p>\n<p>Poking around the <a href=\"http://www.seattlefoodtruck.com\">SeattleFoodTruck</a> site in chrome developer tools I learned that there is a nice API that exposes all of the information such as neighborhoods, locations and trucks that are booked at those locations. Me be like my job is now easy :)</p>\n<h1>What does the seattlefoodtruck bot do?</h1>\n<p>You can ask the bot to show neighborhoods by typing command as shown below\n<img src=\"/images/bot1.png?raw=true\" alt=\"\"></p>\n<p>If everything went well bot will respond with list of neighborhoods where you can find trucks as shown below.</p>\n<p><img src=\"/images/bot2.png?raw=true\" alt=\"\"></p>\n<p>Once you find the neighborhood that you are close to from the list, you can then ask the bot to show locations at that neighborhood by typing command as shown below.\n<img src=\"/images/bot3.png?raw=true\" alt=\"\"></p>\n<p>If everything went well bot will respond with list of locations where you can find trucks as shown below. We will need the location ID to display food trucks at that specific location.\n<img src=\"/images/bot4.png?raw=true\" alt=\"\"></p>\n<p>At this point you can ask the bot to show trucks at that location by typing command as shown below.</p>\n<p><img src=\"/images/bot5.png?raw=true\" alt=\"\"></p>\n<p>If everything went well bot will show you food trucks booked at that location, date and time range when the food truck is available as well as display food categories and an image of the food truck as shown in screen capture below. Need to do some proper date time formatting but figured this will do for now :)\n<img src=\"/images/bot6.png?raw=true\" alt=\"\"></p>\n<p>Obviously once you identify the location closest to you, you can just simply run the command that shows trucks at a location. Typing help will show all the commands supported as shown in screen capture below</p>\n<p><img src=\"/images/bot7.png?raw=true\" alt=\"\"></p>\n<p>You can find the source code for the bot in this github <a href=\"https://github.com/rprakashg/foodtruck-slack-bot\">repository</a>. If you want to use this bot in your organizations channels, there is a Dockerfile included in the repository, simply docker build and run in your container platform and set SLACK_TOKEN environment variable. You will also need to configure the bot in Slack.</p>\n<p>This was a lot of fun recommend you guys to look at bot development you can automate lot of manual steps, as well as connect people with cloud services in an easy to use manner using platforms that are commonly used.</p>\n<p><em>Update 08/07/2017:</em> You can run the bot in heroku as well, today I'm running this for our team in Heroku. Travis file included in the repo can be leveraged to deploy to Heroku on checkin. Just need to update the API key. For more info see <a href=\"https://docs.travis-ci.com/user/deployment/heroku/\">Heroku Deployment</a></p>\n<p>Cheers,\nRam</p>","id":"2924a2fd-b0b8-5553-b6a8-278192e1f3ee","frontmatter":{"title":"Golang Slack Bot","date":"August 06, 2017","tags":["slack","seattlefoodtruck","bot","golang"],"author":"Ram Gopinathan"},"fields":{"slug":"/golang-slack-bot/"}}}]}},"pageContext":{"limit":3,"skip":18,"numPages":11,"currentPage":7}},"staticQueryHashes":["1611934721","2366241629"],"slicesMap":{}}