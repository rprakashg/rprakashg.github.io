{
    "componentChunkName": "component---src-templates-post-list-js",
    "path": "/7",
    "result": {"data":{"site":{"siteMetadata":{"title":"rprakashg.github.io","author":"RAM GOPINATHAN"}},"allMarkdownRemark":{"totalCount":25,"edges":[{"node":{"excerpt":"Why? In Many enterprises leveraging Jenkins for running automated builds, it's quite common to have a central team providing Jenkins and other CI/CD tools as shared service. One of the issues that you…","html":"<h1>Why?</h1>\n<p>In Many enterprises leveraging Jenkins for running automated builds, it's quite common to have a central team providing Jenkins and other CI/CD tools as shared service. One of the issues that you quickly run into is that each development group within enterprise may have different platforms, frameworks, tools, libraries etc and to support the needs of everyone you end up provisioning jenkins build slaves for each group installing everything a particular group needs to be able to build/run jenkins jobs on these Jenkins slave nodes. Depending on number of groups you are supporting, this can get pretty difficult to manage. Thankfully for docker and the Jenkins community there is a docker plugin for Jenkins that can be used to dynamically provision a build slave as a docker container running on a remote docker host, run the build job and tear it down at the end of it. There a numerous benefits with this approach.</p>\n<ol>\n<li>Each development group can build the slave docker image according to their specification and through a CI process build/push the image to a docker registry keeping full ownership within the development team itself. No need to file any requests to get the tools you need installed on jenkins build slaves before your can create your CI/CD processes</li>\n<li>From an Operator's perspective you now have less number of build slaves to manage, preferably zero. I know our teams goal is to get to zero build slaves with fully dockerized approach.</li>\n</ol>\n<p>Here are the steps you can perform to leverage docker for dynamically provisioning a build slave as container:</p>\n<ul>\n<li>Install Docker Plugin</li>\n<li>Enable Docker Remote API on docker host</li>\n<li>Create a Docker image for Jenkins build slave</li>\n<li>Configure Jenkins</li>\n<li>Creating Jenkins job to run on docker</li>\n</ul>\n<h2>Install Docker Plugin</h2>\n<p>For the purposes of this post I installed a single node Jenkins server using Vagrant, I won't go too much into how I setup Jenkins as its all well documented and pretty easy to get setup. To install the docker plugin, login to Jenkins console and click on manage jenkins and from manage jenkins click on manage plugins. Switch to the available tab and you can scroll down or use the filter to find the docker plugin, select it to install. You may need to restart jenkins server for changes to get in effect.</p>\n<h2>Enable Docker Remote API on docker host</h2>\n<p>This is important step, plugin communicates with Docker via remote rest API which is turned off by default. You can enable it by simply adding below options to your dockerd startup</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</code></pre></div>\n<p>For the purposes of this demo I installed docker on centos/7 using Vagrant, if you installed docker on centos/7 you can update /usr/lib/systemd/system/docker.service file, look for ExecStart=/usr/bin/dockerd and add above options to dockerd. Restart docker by running commands below</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo systemctl daemon-reload\nsudo systemctl restart docker</code></pre></div>\n<h2>Create a Docker image for Jenkins build slave</h2>\n<p>First thing to keep in mind here is depending on the platform that you are using to build your application, choose an appropriate base image, there are lots of base images available for Java, Golang, Node etc. If none fits the bill start from scratch and add everything you need to it. Docker image should also have following:</p>\n<ol>\n<li>SSH server installed</li>\n<li>OpenJDK</li>\n<li>User that you can use to login with, typically \"jenkins\"</li>\n</ol>\n<p>Docker image should also expose port 22 for SSH and start sshd service when container is run. See an example Dockerfile that I use to create a jenkins slave image for running Hugo builds</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM golang:1.8.3-alpine\n\nMAINTAINER Ramprakash.Gopinathan@t-mobile.com\n\nENV HUGO_VERSION 0.25\nENV HUGO_BINARY hugo_${HUGO_VERSION}_linux-64bit\nENV PATH=/usr/local/hugo:${PATH}\n\nRUN set -x \\\n    &amp;&amp; apk --no-cache update \\\n    &amp;&amp; apk --no-cache upgrade \\\n    &amp;&amp; apk --no-cache add git bash curl openssh python python-dev py-pip py-pygments openjdk8 wget\\\n    &amp;&amp; ssh-keygen -A \\\n    &amp;&amp; rm -rf /var/cache/apk/* \\\n    &amp;&amp; adduser -D jenkins \\\n    &amp;&amp; echo \"jenkins:jenkins\" | chpasswd \\\n    &amp;&amp; mkdir -p /var/run/sshd \\\n    &amp;&amp; mkdir /usr/local/hugo \\\n    &amp;&amp; wget https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/${HUGO_BINARY}.tar.gz -O /usr/local/hugo/${HUGO_BINARY}.tar.gz \\\n    &amp;&amp; tar xzf /usr/local/hugo/${HUGO_BINARY}.tar.gz -C /usr/local/hugo/ \\\n\t&amp;&amp; rm /usr/local/hugo/${HUGO_BINARY}.tar.gz \\\n    &amp;&amp; pip install --upgrade pip \\\n    &amp;&amp; pip install awscli \\\n    &amp;&amp; git clone https://github.com/s3tools/s3cmd.git /opt/s3cmd \\\n    &amp;&amp; ln -s /opt/s3cmd/s3cmd /usr/bin/s3cmd \n\nEXPOSE 22\n\nCMD [\"/usr/sbin/sshd\", \"-D\"]</code></pre></div>\n<p>Build the docker image and publish to your internal private docker registry, this allows you to login to your private registry from Docker host and pull the image down. You could always run docker save command to create a tar ball and scp this to docker host and run docker load to get the image on to the docker host.</p>\n<h2>Configure Jenkins</h2>\n<p>We now need configure Jenkins to use Docker for dynamically provisioning slave as containers on docker host. Login to your Jenkins console and click on \"Manage Jenkins\" option. From manage jenkins click on \"Configure System\" option and scroll all the way to the bottom of the page.\nUnder \"Cloud\" section click on \"Add a new cloud\" button. If the plugin is installed correctly you will see \"Docker\" option as shown below.</p>\n<p><img src=\"/images/jenkins3.jpg?raw=true\" alt=\"\"></p>\n<p>Enter information about your docker host. As I mentioned earlier I setup a docker host using vagrant for the purposes of this demo and created an entry in my /etc/hosts file to map the IP address of the VM to docker.local. You can test to make sure Jenkins server is able to talk to docker host by clicking on \"Test Connection\" button. See screenshot below:</p>\n<p><img src=\"/images/jenkins4.jpg?raw=true\" alt=\"\"></p>\n<p>Next enter image information such as full image name, Labels and credential to connect to the slave, this will be the user we created in docker file for the slave image. Labels allow us to restrict the builds. See screenshot below. I've added the java image \"evarga/jenkins-slave\" and the one I've created for running hugo builds, see more on that <a href=\"https://goo.gl/5ecm2V\">here</a></p>\n<p><img src=\"/images/jenkins5.jpg?raw=true\" alt=\"\"></p>\n<h2>Creating jenkins job to run on docker</h2>\n<p>At this point you are ready to run your build jobs on docker. Simply configure your job and specify Label Expression use docker as shown below.</p>\n<p><img src=\"/images/jenkins6.jpg?raw=true\" alt=\"\"></p>\n<p>Hope this helps, As usual any comments or questions please use the disqus option below</p>\n<p>Cheers,\nRam</p>","id":"c6a957a8-8548-50c4-991b-ca2486819827","frontmatter":{"title":"Using docker for dynamically provisioning jenkins build slaves and running build jobs","date":"July 08, 2017","tags":["jenkins","docker"],"author":"Ram Gopinathan"},"fields":{"slug":"/jenkins-build-slave-as-container/"}}},{"node":{"excerpt":"Overview At T-Mobile we are starting to leverage Hugo which is an OSS static site generator tool for a few marketing type of sites. We are also huge Jenkins shop and run jenkins build slaves in docker…","html":"<h1>Overview</h1>\n<p>At T-Mobile we are starting to leverage <a href=\"http://gohugo.io\">Hugo</a> which is an OSS static site generator tool for a few marketing type of sites. We are also huge Jenkins shop and run jenkins build slaves in docker and Mesos/Marathon. We use S3 bucket for hosting content generated, cloudfront for global content delivery and route 53 for DNS. I've created a docker jenkins build slave image for building hugo projects in Jenkins. Image comes preloaded with Hugo and AWS CLI along with S3Cmd utility that is typically used for syncing content to S3 bucket.</p>\n<p>If you are using Hugo and Jenkins you'll find this image useful. Image is available in docker hub. You can run command below to pull the image down to your docker host that your are using with Jenkins. If you have any issues and or comments or questions let me know.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker pull rprakashg/hugo-jenkins-build-slave</code></pre></div>\n<p>Git repository for this image is <a href=\"http://github.com/rprakashg/hugo-jenkins-build-slave\">here</a></p>\n<p>Cheers,</p>\n<p>Ram</p>","id":"e90a1166-b4c4-5650-ae84-1aef654cee74","frontmatter":{"title":"Jenkins Build Slave Image For Building Hugo Projects","date":"July 08, 2017","tags":["jenkins","docker","hugo"],"author":"Ram Gopinathan"},"fields":{"slug":"/hugo-jenkins-build-slave-image/"}}},{"node":{"excerpt":"Overview Application Telemetry is one of the key practices that is required to diagnose the health of your application or microservice. At T-Mobile like most of the organizations practicing DevOps we…","html":"<h1>Overview</h1>\n<p>Application Telemetry is one of the key practices that is required to diagnose the health of your application or microservice. At T-Mobile like most of the organizations practicing DevOps we are also big on telemetry. In this post I will walk through how we collect what we call RED metrics from application code. RED stands for Request rate, Error rate, Duration (Latency). Additionaly we also collect metrics on resource consumption. Most of our code is written in Java so this is mostly JVM metrics.</p>\n<h2>Approach</h2>\n<p>In a typical SpringBoot based Microservice there are multiple types and objects so our metrics collection solution needed to address some of the cross cutting scenarios. Thanks to AOP Support in SpringBoot this was pretty easy to implement.</p>\n<h3>What is AOP</h3>\n<p>AOP stands for Aspect Oriented Programming, unlike Object Oriented Programming (OOP) where the unit of modularity is a class, in AOP this is called an Aspect, hence Aspect oriented programming. Aspect enable modularization of concerns such as transaction management, RED metrics collection I referred to earlier, etc. that cut across multiple types and objects</p>\n<h3>Tools and Libraries used</h3>\n<p>For collecting metrics from the application we use a library from <a href=\"http://metrics.dropwizard.io/3.2.2/\">DropWizard</a>. Core dropwizard metrics library is added as dependency as shown below</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- drop wizard --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.dropwizard.metrics<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>metrics-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>${dropwizard-metrics.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>For collecting JVM metrics to get insights into resource consumption, metrics jvm library dependency is added to maven pom.xml as shown below</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.dropwizard.metrics<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>metrics-jvm<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>${dropwizard-metrics.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>For storing metrics in Graphite, Dropwizard provides a library that includes graphite reporting capabilities. You can pull this dependency into your project by updating your pom.xml as shown below</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.dropwizard.metrics<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>metrics-graphite<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>${dropwizard-metrics.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>We also use a library <a href=\"http://metrics.ryantenney.com/\">Metrics for Spring</a> which is a module that integrates dropwizard metrics library with Spring.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- ryantenney metrics --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.ryantenney.metrics<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>metrics-spring<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Additionally to leverage Spring AOP support we will need to add \"spring-boot-starter-aop\" dependency as shown below</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- Spring AOP + aspectJ --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>${spring.boot.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Graphite for storing metrics from microservices and grafana for visualization of these metrics. For the purposes of this blog post I'm running both graphite and grafana in a container and I have created a docker-compose file.</p>\n<h3>Metrics Collector Aspect</h3>\n<p>Annotate class with \"@Aspect\" to tell Spring AOP Framework that the specific class is an Aspect. In my case I named this class MetricsCollector. This class has a method called \"CollectMetrics\" which includes an \"Around\" advice that invokes a PointCut expression that looks for any method that has an \"CollectMetrics\" annotation. Many AOP frameworks including Spring, model an advice as an interceptor. See the code from the MetricsCollector aspect below.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MetricsCollector</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> <span class=\"token constant\">LOG</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetricsCollector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ExtendedMetricRegistry</span> metricRegistry<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(collectMetrics)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">collectable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CollectMetrics</span> collectMetrics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"collectable(collectMetrics)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">collectMetrics</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CollectMetrics</span> collectMetrics<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Object</span> targetObject<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// start  timer</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Timer<span class=\"token punctuation\">.</span>Context</span> timerContext <span class=\"token operator\">=</span> metricRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetricRegistry</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExtendedMetricRegistry</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DURATION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//increment total requests meter</span>\n        metricRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">meter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetricRegistry</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExtendedMetricRegistry</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUESTS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// log arguments</span>\n            <span class=\"token function\">logArguments</span><span class=\"token punctuation\">(</span>pjp<span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            targetObject <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> elapsed <span class=\"token operator\">=</span> timerContext<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            metricRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">recordTime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetricRegistry</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">,</span> metricRegistry<span class=\"token punctuation\">.</span><span class=\"token constant\">DURATION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> elapsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> targetObject<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@AfterThrowing</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"@annotation(com.rprakashg.sb.samples.CollectMetrics)\"</span><span class=\"token punctuation\">,</span> throwing <span class=\"token operator\">=</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">JoinPoint</span> jp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> jp<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        metricRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">meter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetricRegistry</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">,</span> metricRegistry<span class=\"token punctuation\">.</span><span class=\"token constant\">ERRORS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logArguments</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> arguments <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">LOG</span><span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token constant\">LOG</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Executing method: [ {} ] with arguments: {}. \"</span><span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the code above you can see we are using a Timer for capturing duration of the method call as well as incrementing REQUESTS meter when ever method is called and if any exception is thrown inside the method, ERRORS meter is also incremented.</p>\n<p>For collecting metrics on resource consumption we simply are adding all the JVM metrics. You can see in below code from Spring Application Configuration class that initializes an ExtendedMetricsRegistry which is a simple wrapper class around MetricsRegistry in DropWizard library</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationConfig</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ExtendedMetricRegistry</span> emr<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.application.name}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> appName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ExtendedMetricRegistry</span> <span class=\"token function\">extendedMetricRegistry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">MetricsConfig</span> metricsConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        emr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExtendedMetricRegistry</span><span class=\"token punctuation\">(</span>appName<span class=\"token punctuation\">,</span> metricsConfig<span class=\"token punctuation\">.</span><span class=\"token function\">getMetricRegistry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emr<span class=\"token punctuation\">.</span><span class=\"token function\">registerGCMetricSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emr<span class=\"token punctuation\">.</span><span class=\"token function\">registerBufferPoolMetricSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emr<span class=\"token punctuation\">.</span><span class=\"token function\">registerMemoryUsageGuageSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emr<span class=\"token punctuation\">.</span><span class=\"token function\">registerThreadStatesGuageSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> emr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To demonstrate the usage of metrics collection I wrote a sample Microservice that uses YAHOO api for looking up stock prices for a specific symbol you pass. To automatically collect RED metrics from any method we can simply add @CollectMetrics(true) annotation as shown below and voila we have metrics :)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoServiceController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> <span class=\"token constant\">LOG</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DemoServiceController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StockQuoteService</span> service<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@CollectMetrics</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/quotes/{tickerSymbol}\"</span><span class=\"token punctuation\">,</span>\n            produces <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"application/json\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            consumes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"application/json\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Quote</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStockQuote</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tickerSymbol\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> tickerSymbol<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BackendServiceException</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Response</span> r <span class=\"token operator\">=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getStockQuote</span><span class=\"token punctuation\">(</span>tickerSymbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">getQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQuote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There is also a Dockerfile for containerizing the Java SpringBoot application. Additionally I've included a Docker-Compose file to get the entire stack up and running.</p>\n<p>If you are interested in seeing this in action simply clone this repo as shown below</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git clone https://github.com/rprakashg/metrics-demo.git</code></pre></div>\n<p><em>Updates 07/03/2017: Updated dockerfile to leverage docker multi stage builds as a result mvn clean install no longer needs to be run</em>\n<del> Swtich directory to metrics-demo/metrics-common and run mvn command below to compile and install the jar in your local maven repo.</del></p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> mvn clean install</span></code></pre></div>\n<p><del>Next switch the directory to \"stock-quote-service\" directory under \"metrics-demo\" and run the same maven command as above.\nChange the directory back to \"metrics-demo\" and simply run the docker-compose command shown below. This will build a container image for stock-quote-service microservice.</del>\nBuild the stock quote demo service by running the docker-compose command below.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker-compose -f metrics.yml build</code></pre></div>\n<p>Run the entire application including graphite and grafana monitoring stack by running following command below.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker-compose -f metrics.yml up</code></pre></div>\n<h3>Metrics in Grafana</h3>\n<p>I ran a few tests from postman against the stock-quote-service API and here is a sample dashboard showing RED metrics in action\n<img src=\"/images/metrics.jpg?raw=true\" alt=\"\"></p>\n<p>All the code is in this github <a href=\"https://github.com/rprakashg/metrics-demo\">repo</a> Let me know if you have any comments or feedback.</p>\n<p>Cheers,</p>\n<p>Ram</p>","id":"e9b36420-fc3e-5e71-82a8-d31a54e5dd4c","frontmatter":{"title":"Using spring aop for automatic collection of metrics from your SpringBoot based Microservice","date":"June 29, 2017","tags":["springboot","metrics","telemetry","dropwizard","graphite","grafana"],"author":"Ram Gopinathan"},"fields":{"slug":"/using-spring-aop-for-metrics-collection/"}}}]}},"pageContext":{"limit":3,"skip":18,"numPages":10,"currentPage":7}},
    "staticQueryHashes": ["1611934721","2366241629"]}