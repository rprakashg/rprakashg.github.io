{"componentChunkName":"component---src-templates-post-list-js","path":"/2","result":{"data":{"site":{"siteMetadata":{"title":"rprakashg.github.io","author":"RAM GOPINATHAN"}},"allMarkdownRemark":{"totalCount":15,"edges":[{"node":{"excerpt":"Hugo is a great OSS project that can be used to create static sites that are based on markdown files stored in a git repository. My personal blog is created using hugo and hosted on AWS S3. I recently…","html":"<p>Hugo is a great OSS project that can be used to create static sites that are based on markdown files stored in a git repository. My personal blog is created using hugo and hosted on AWS S3. I recently did some work to dockerize it and thought I'd write about it.</p>\n<p>First thing I needed to do was create a docker image with hugo installed so I can build my hugo site. For more info on the docker image see the Dockerfile contents below, you can also check out the git repository <a href=\"https://github.com/rprakashg/hugo-docker\">here</a>. As you can see from the below snippet, nothing major is going on here, I'm using golang alpine image as a base and then installing hugo and adding hugo to the system path.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM golang:1.8.3-alpine\n\nENV HUGO_VERSION 0.25 \nENV HUGO_BINARY hugo_${HUGO_VERSION}_linux-64bit \nENV PATH=/usr/local/hugo:${PATH}\n\nRUN set -x \\\n    &amp;&amp; apk upgrade --update \\\n    &amp;&amp; apk add --update ca-certificates bash curl wget \\\n    &amp;&amp; rm -rf /var/cache/apk/* \\\n    &amp;&amp; mkdir /usr/local/hugo \\\n    &amp;&amp; wget https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/${HUGO_BINARY}.tar.gz -O /usr/local/hugo/${HUGO_BINARY}.tar.gz \\\n    &amp;&amp; tar xzf /usr/local/hugo/${HUGO_BINARY}.tar.gz -C /usr/local/hugo/ \\\n  &amp;&amp; rm /usr/local/hugo/${HUGO_BINARY}.tar.gz \\\n    &amp;&amp; rm -rf /tmp/* /var/cache/apk/* </code></pre></div>\n<p>In my Dockerfile for my personal hugo based blog I use multi stage builds feature in docker to generate static HTML using hugo. As you can see from below snipped that I'm using the \"hugo-docker\" image I created as builder image and create a directory named \"blog\" under /var/www/ and copy all files into that directory.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM rprakashg/hugo-docker as builder\n\nRUN mkdir -p /var/www/blog\n\nCOPY . /var/www/blog</code></pre></div>\n<p>Next, we switch the working directory to \"/var/www/blog\" and run hugo command as shown in below snippet to generate the static HTML</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">WORKDIR /var/www/blog\n\nRUN hugo</code></pre></div>\n<p>Final image is built using the official nginx image from docker hub and we copy all generated HTML content from \"public\" folder into \"/usr/share/nginx/html\"</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM nginx\n\nCOPY --from=builder /var/www/blog/public/ /usr/share/nginx/html</code></pre></div>\n<p>You can see the full docker file <a href=\"https://raw.githubusercontent.com/rprakashg/blog/master/Dockerfile\">here</a></p>\n<p>Lastly, I threw together couple of helpful bash scripts that I can use to build and run the container so I don't have to always remember the docker commands :)</p>\n<p>The cool thing about this is I can now run my blog anywhere, I use to host my blog previously in azure with Wordpress and MySQL, by using hugo I freed myself from dependency to web servers, runtimes, databases etc. but was still dependant on AWS S3 to host the generated static HTML content. Even though its pretty minor you are sort of locked into AWS. Docker gives me freedom to run it anywhere and I love it :)</p>\n<p>Hope that helps...</p>\n<p>Cheers,</p>\n<p>Ram</p>","id":"328875e5-fcc3-5a19-b0fd-4c9bda79266d","frontmatter":{"title":"Dockerizing Hugo Sites","date":"November 11, 2017","tags":["hugo","docker","blog"]},"fields":{"slug":"/dockerizing-hugo-sites/"}}},{"node":{"excerpt":"It's extremely important to always be aware of all the announcements related to security issues for the products you use and support within your company, If you use slack we can have all these…","html":"<p>It's extremely important to always be aware of all the announcements related to security issues for the products you use and support within your company, If you use <a href=\"https://slack.com/\">slack</a> we can have all these announcements posted directly to a slack channel. In this post, I will go over how we can do just that for Docker.</p>\n<h1>Approach</h1>\n<p>You can get a list of known security vulnerabilities using <a href=\"http://www.cvedetails.com\">www.cvedetails.com</a> website. Known security vulnerabilities can be searched by the vendor, product, version etc.\nBelow RSS feed will provide you all known security vulnerabilities for Docker\n<a href=\"http://www.cvedetails.com/vulnerability-feed.php?vendor_id=13534&#x26;orderby=3&#x26;cvssscoremin=0\">http://www.cvedetails.com/vulnerability-feed.php?vendor_id=13534&#x26;orderby=3&#x26;cvssscoremin=0</a></p>\n<p>If you want to further filter down by specific product or version you can simply add \"product_id\" and/or \"version_id\" to the query string. To find the product id or version id <a href=\"http://www.cvedetails.com\">www.cvedetails.com</a> site provides product search and version search capabilities, once you have found the product through the search capability you can simply copy the product id and/or version id from the address bar in your browser and include it in the query string for above RSS feed URL</p>\n<p>From the above RSS feed URL vendor id \"13534\" is for Docker.</p>\n<p>Create a slack channel named \"docker\" in your slack workspace where we can post all security vulnerabilities related to Docker as well as have all docker related discussions.</p>\n<p>Copy the above RSS URL and issue following command in the slack channel.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/feed subscribe http://www.cvedetails.com/vulnerability-feed.php?vendor_id<span class=\"token operator\">=</span><span class=\"token number\">13534</span><span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">orderby</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">cvssscoremin</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></code></pre></div>\n<p>Before you subscribe to RSS feed verify that it's not already subscribed by issuing command below which will list out all the RSS feeds that are already subscribed</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/feed list</code></pre></div>\n<p>Once you receive an announcement you should evaluate it and if you are affected by it patch or mitigate the risk, test it and notify everyone.</p>\n<p>Hope this helps...</p>\n<p>Cheers,\nRam</p>","id":"b097de9c-11d7-58f0-be82-91d2650ad6fd","frontmatter":{"title":"Automatically get latest Docker security vulnerabilities posted to slack channel","date":"October 25, 2017","tags":["docker","cve","security","slack"]},"fields":{"slug":"/post-docker-security-updates-to-slack/"}}},{"node":{"excerpt":"What is Configuration as code? Configuration as code is a DevOps practice that promotes storing of application configuration as code within source code repository. Few key benefits that this brings is…","html":"<h2>What is Configuration as code?</h2>\n<p>Configuration as code is a DevOps practice that promotes storing of application configuration as code within source code repository. Few key benefits that this brings is that</p>\n<ul>\n<li>\n<p>Versioning of application configuration</p>\n<p>By storing the application configuration in source code repository such as Git allows us to see what configuration changes were made over a period of time and who made those changes</p>\n<p>By using branches you can isolate changes that are under development without affecting the production application</p>\n</li>\n<li>\n<p>Traceability</p>\n<p>Versioned and managed properly, can provide tracking of what version of configuration is deployed in various environments</p>\n</li>\n<li>\n<p>Make configuration changes without requiring to re-deploy application</p>\n<p>Operators would love you for this for ex. Operators can throttle logging level up in configuration settings file to troubleshoot a production issue without having to redeploy the application.</p>\n</li>\n</ul>\n<h2>Implementation</h2>\n<p>Now that we understand what configuration as code is and what benefits it brings let's take a look at how we would implement this with docker and spring boot. Spring boot provides support for keeping configuration settings in \"yml\" files instead of using a properties files, by default spring boot looks for these \"yml\" files under classpath but you can specify an explicit location by setting \"spring.config.location\" property via command line during application startup.</p>\n<p>For the purpose of this article we have stored all default configurations for this demo application application.yml file and environment specific settings are stored in application-{environment label}.yml file as shown in screen capture below</p>\n<p><img src=\"/images/dzone4.png?raw=true\" alt=\"\"></p>\n<p>Since we are running the spring boot app in docker, we can use an \"entrypoint.sh\" bash script to pull default configuration and environment specific configuration files from \"git\" repository onto directory named \"configs\" as shown below using wget command.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Downloading configuration files from git repository\"</span>\n<span class=\"token function\">wget</span>  <span class=\"token variable\">$GIT_REPO</span>/<span class=\"token variable\">$LABEL</span>/<span class=\"token variable\">$REL_PATH</span>/<span class=\"token variable\">$APP_NAME</span>.yml\n<span class=\"token function\">wget</span>  <span class=\"token variable\">$GIT_REPO</span>/<span class=\"token variable\">$LABEL</span>/<span class=\"token variable\">$REL_PATH</span>/<span class=\"token variable\">$APP_NAME</span>-<span class=\"token variable\">$PROFILE</span>.yml\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"copying yml files to configs directory\"</span>\n<span class=\"token function\">cp</span> <span class=\"token variable\">$APP_NAME</span>.yml ./configs/<span class=\"token variable\">$APP_NAME</span>.yml\n<span class=\"token function\">cp</span> <span class=\"token variable\">$APP_NAME</span>-<span class=\"token variable\">$PROFILE</span>.yml ./configs/<span class=\"token variable\">$APP_NAME</span>-<span class=\"token variable\">$PROFILE</span>.yml</code></pre></div>\n<p>As you can see from the above snippet</p>\n<ul>\n<li>\n<p>\"GIT_REPO\" environment variable is used to pass the git repository URL where the configuration files are stored.</p>\n</li>\n<li>\n<p>\"LABEL\" environment variable maps to the branch, in development/test/staging phases you might use \"MASTER\", when you release it to production you'll want to create a branch and use that branch label. This allows us to isolate changes that are under development from impacting the production application.</p>\n</li>\n<li>\n<p>\"REL_PATH\" environment variable is used to point to the location of configuration files in repo relative to the repository path.</p>\n</li>\n<li>\n<p>\"APP_NAME\" environment variable maps to file name, in the demo app I'm keeping default name \"application\"</p>\n</li>\n<li>\n<p>\"PROFILE\" environment variable maps to name of environment which the application is running. Spring boot will merge the default settings and environment specific settings and provide it to your application.</p>\n</li>\n</ul>\n<p>(Note: If your git repository requires authentication you can use ssh or HTTPS protocol with username and password to authenticate with the git repository. Docker container can obtain the credentials required to connect to git repository during startup.)</p>\n<p>Once the configuration files are downloaded from repository onto \"configs\" directory in the container we specify this location via application startup using the \"spring.config.location\" property as shown in below snippet</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">exec</span> java <span class=\"token variable\">$JAVA_OPTS</span> -jar /app.jar --spring.config.location<span class=\"token operator\">=</span><span class=\"token string\">\"./configs/<span class=\"token variable\">$APP_NAME</span>.yml, ./configs/<span class=\"token variable\">$APP_NAME</span>-<span class=\"token variable\">$PROFILE</span>.yml\"</span></code></pre></div>\n<h2>Running the demo application</h2>\n<p>Let's now run this demo application with staging settings as shown in command below</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker run -d -p <span class=\"token number\">80</span>:8080 -e <span class=\"token assign-left variable\">PROFILE</span><span class=\"token operator\">=</span>staging -e <span class=\"token assign-left variable\">GIT_REPO</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://raw.githubusercontent.com/rprakashg/blog-demos\"</span> <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">LABEL</span><span class=\"token operator\">=</span>master -e <span class=\"token assign-left variable\">REL_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"externalize-config-demo/src/main/resources\"</span> <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">APP_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"application\"</span> rprakashg/externalize-config-demo</code></pre></div>\n<p>Demo application simply displays the configuration information and you can see from the screen capture below that application has picked up default settings as well as staging environment specific settings.\n<img src=\"/images/dzone5.png?raw=true\" alt=\"\"></p>\n<p>Let's run the same demo application now with production settings as shown in snippet below.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker run -d -p <span class=\"token number\">80</span>:8080 -e <span class=\"token assign-left variable\">PROFILE</span><span class=\"token operator\">=</span>production -e <span class=\"token assign-left variable\">GIT_REPO</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://raw.githubusercontent.com/rprakashg/blog-demos\"</span> <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">LABEL</span><span class=\"token operator\">=</span>master -e <span class=\"token assign-left variable\">REL_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"externalize-config-demo/src/main/resources\"</span> <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">APP_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"application\"</span> rprakashg/externalize-config-demo</code></pre></div>\n<p>As you can see from the screen show below that the application now picks up default as well as production specific settings.</p>\n<p><img src=\"/images/dzone6.png?raw=true\" alt=\"\"></p>\n<h2>Source Code</h2>\n<p>All the code for the demo application is available at this github <a href=\"https://github.com/rprakashg/blog-demos/tree/master/externalize-config-demo\">repository</a></p>\n<h2>Conclusion</h2>\n<p>Configuration as code is a good practice that all development teams practicing devops should follow. Many of the benefits gained from implementing configuration as code can help increase velocity and deliver new features to your customers in production faster and help operators run and manage application in production efficiently.</p>","id":"7c7e2414-ebd7-5758-9521-fde724495e98","frontmatter":{"title":"Configuration As Code With Docker and Spring Boot","date":"September 22, 2017","tags":["java","devops","microservices","docker"]},"fields":{"slug":"/config-as-code-with-docker-spring-boot/"}}}]}},"pageContext":{"limit":3,"skip":3,"numPages":6,"currentPage":2}},"staticQueryHashes":["1468229134","1611934721"]}